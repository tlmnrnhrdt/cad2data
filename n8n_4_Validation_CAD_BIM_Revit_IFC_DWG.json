{
  "name": "n8n_4_Validation_CAD_BIM_Revit_IFC_DWG",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -3500,
        1160
      ],
      "id": "7be57333-0b2b-4c28-911d-9318a840d699",
      "name": "Start - Click to begin"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9cbd4ec9-df24-41e8-b47a-720a4cdb733b",
              "name": "path_to_converter",
              "value": "C:\\Users\\Artem Boiko\\Documents\\GitHub\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto\\DDC_Converter_Revit\\RvtExporter.exe",
              "type": "string"
            },
            {
              "id": "aa834467-80fb-476a-bac1-6728478834f0",
              "name": "project_file",
              "value": "C:\\Users\\Artem Boiko\\Desktop\\n8n\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\Sample_Projects\\2023 racbasicsampleproject.rvt",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3260,
        1160
      ],
      "id": "1fa3e48b-1265-445b-8204-5ed05c5c909d",
      "name": "Setup - Define file paths"
    },
    {
      "parameters": {
        "content": "## 🚀 START WORKFLOW\n\nClick \"Execute Workflow\" button to begin the validation process",
        "height": 444,
        "width": 190
      },
      "id": "4f16f064-e93f-48da-8fa7-7f756d5aece3",
      "name": "Sticky Note - Start",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3520,
        940
      ]
    },
    {
      "parameters": {
        "filePath": "={{ $json[\"xlsx_filename\"] }}"
      },
      "id": "168c3e41-48d8-4eb7-92ec-817764620f6e",
      "name": "Read Project Excel File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -1660,
        1260
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "validation-rules-path-id",
              "name": "validation_rules_path",
              "value": "C:\\Users\\Artem Boiko\\Desktop\\n8n\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\n8n_3_DDC_BIM_Requirements_Table_for_Revit_IFC_DWG.xlsx",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "957fd080-3b95-435b-9fe7-b369f3292614",
      "name": "Set Validation Rules Path",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1660,
        1100
      ]
    },
    {
      "parameters": {
        "content": "## 📋 VALIDATION RULES\n\n**Specify the path to rules file:**\n`validation_rules_path`\n\nThis file contains validation criteria",
        "height": 680,
        "width": 220,
        "color": 4
      },
      "id": "ecfec5f4-c26d-46ed-8760-1f10e6b90ea3",
      "name": "Sticky Note - Validation Rules",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1740,
        740
      ]
    },
    {
      "parameters": {
        "filePath": "={{ $json[\"validation_rules_path\"] }}"
      },
      "id": "6656e08e-941e-4189-9519-b3d9f1a46555",
      "name": "Read Validation Rules File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -1420,
        1180
      ]
    },
    {
      "parameters": {},
      "id": "073c8ca6-eb79-4712-a58e-e5be9d00c443",
      "name": "Merge Excel Files",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1180,
        1280
      ]
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def _disable_n8n_mitigations():\n    import sys\n\n    # n8n 1.99: blocked `os` module: https://github.com/n8n-io/n8n/pull/15970\n    sys.meta_path = [finder for finder in sys.meta_path if \"ImportBlocker\" not in str(finder)]\n\n    # n8n 1.102: blocked `js` module: https://github.com/n8n-io/n8n/pull/16957\n    import js\n    sys.modules.pop(\"js\", None)\n\n\n_disable_n8n_mitigations()\n\nimport micropip\nawait micropip.install(\"openpyxl\")\nfrom io import BytesIO\nimport pandas as pd\nimport datetime\nimport base64\nimport os\nfrom openpyxl import load_workbook\nfrom openpyxl.styles import Alignment, PatternFill\n\n# Get the uploaded Excel files\ninput_data = _input.all()\n\n# Get project Excel data (from Read Project Excel File node)\nproject_binary = input_data[0][\"binary\"]\nproject_b64_excel = project_binary[\"data\"][\"data\"]\nproject_excel_bytes = BytesIO(base64.b64decode(project_b64_excel))\n\n# Get validation rules Excel data (from Read Validation Rules File node)\nvalidation_binary = input_data[1][\"binary\"]\nvalidation_b64_excel = validation_binary[\"data\"][\"data\"]\nvalidation_excel_bytes = BytesIO(base64.b64decode(validation_b64_excel))\n\n# Get the validation rules path from the previous node to determine output directory\nvalidation_rules_path = input_data[1][\"json\"][\"validation_rules_path\"]\noutput_directory = os.path.dirname(validation_rules_path)\nprint(f\"Output directory: {output_directory}\")\n\n# Load project data\ndf = pd.read_excel(project_excel_bytes)\nprint(f\"Loaded {len(df)} rows from project file\")\n\n# Handle duplicate columns\nduplicate_cols = df.columns[df.columns.duplicated(keep=False)].unique().tolist()\nif duplicate_cols:\n    print(f\"WARNING: Duplicate columns found: {duplicate_cols}\")\n\n# Clean column names\ncolumn_mapping = {col: col.split(' : ')[0] if ':' in col else col for col in df.columns}\ncleaned_columns = list(column_mapping.values())\n\n# Load and prepare workbook\nwb = load_workbook(validation_excel_bytes)\nws = wb.active\n\n# Unmerge cells in columns D-G\nfor mr in list(ws.merged_cells.ranges):\n    if any(col in range(mr.min_col, mr.max_col + 1) for col in [4, 5, 6, 7]):\n        print(f\"Unmerging: {mr}\")\n        ws.unmerge_cells(str(mr))\n\n# Get category column\ncategory_col = ws['B2'].value\nprint(f\"Category column: {category_col}\")\n\n# Find category column in data\nif category_col not in df.columns:\n    for orig, cleaned in column_mapping.items():\n        if cleaned == category_col:\n            category_col = orig\n            break\n    if category_col not in df.columns:\n        raise ValueError(f\"Category column '{category_col}' not found\")\n\nprint(f\"Data type: {df[category_col].dtype}, Unique values: {df[category_col].nunique()}\")\n\n# Read validation rules from the Excel\nvalidation_excel_bytes.seek(0)  # Reset the stream\ndf_excel = pd.read_excel(validation_excel_bytes)\nvalid_mask = df_excel.iloc[1:, 1].notna() & df_excel.iloc[1:, 2].notna()\nvalidation_data = pd.DataFrame({\n    'row': df_excel.index[1:][valid_mask] + 2,\n    'group': df_excel.iloc[1:, 1][valid_mask].values,\n    'param': df_excel.iloc[1:, 2][valid_mask].values\n})\n\n# Define fills\nred_fill = PatternFill(start_color='FFCCCC', end_color='FFCCCC', fill_type='solid')\ngreen_fill = PatternFill(start_color='CCFFCC', end_color='CCFFCC', fill_type='solid')\n\nprint(f\"Processing {len(validation_data)} rules...\")\n\n# Helper function\ndef get_best_column(df, param, group_df):\n    matches = [i for i, col in enumerate(df.columns) if cleaned_columns[i] == param]\n    \n    if not matches:\n        return param if param in df.columns else None\n    \n    if len(matches) == 1:\n        return df.columns[matches[0]]\n    \n    print(f\"  Found {len(matches)} columns named '{param}'\")\n    best_idx, best_count = matches[0], -1\n    \n    for idx in matches:\n        col = df.columns[idx]\n        if col in group_df.columns:\n            count = group_df[col].notna().sum()\n            print(f\"    Column {idx}: {count} values\")\n            if count > best_count:\n                best_idx, best_count = idx, count\n    \n    return df.columns[best_idx]\n\n# Process validation rules\nfor _, row in validation_data.iterrows():\n    r, grp, prm = row['row'], str(row['group']).strip(), str(row['param']).strip()\n    \n    try:\n        # Filter by category\n        cat_df = df[df[category_col] == grp]\n        \n        # Try alternative matching if no exact match\n        if len(cat_df) == 0 and ':' in grp:\n            cat_df = df[df[category_col].astype(str).str.contains(grp, na=False, regex=False)]\n        \n        total = len(cat_df)\n        \n        # Get column and calculate metrics\n        col = get_best_column(df, prm, cat_df)\n        \n        if col and col in cat_df.columns:\n            valid_df = cat_df[cat_df[col].notna() & ~cat_df[col].isin([0, 0.0, \"0\", \"0.0\", \"0,0\"])]\n            filled = len(valid_df)\n            fill_pct = filled / total if total > 0 else 0\n            unique_cnt = valid_df[col].nunique()\n            unique_vals = valid_df[col].unique()[:10]\n            unique_str = \", \".join(map(str, unique_vals))\n            if len(unique_vals) > 10:\n                unique_str += f\"... ({valid_df[col].nunique()} total)\"\n        else:\n            filled = fill_pct = unique_cnt = 0\n            unique_str = \"\"\n        \n        # Write to Excel\n        ws[f'D{r}'] = total\n        ws[f'D{r}'].alignment = Alignment(horizontal='center')\n        \n        ws[f'E{r}'].value = fill_pct\n        ws[f'E{r}'].number_format = '0.00%'\n        ws[f'E{r}'].alignment = Alignment(horizontal='center')\n        ws[f'E{r}'].fill = green_fill if fill_pct > 0 else red_fill\n        \n        ws[f'F{r}'] = unique_cnt\n        ws[f'F{r}'].alignment = Alignment(horizontal='center')\n        \n        ws[f'G{r}'] = unique_str\n        ws[f'G{r}'].alignment = Alignment(horizontal='left')\n        \n    except Exception as e:\n        print(f\"  ERROR: {type(e).__name__}: {str(e)}\")\n        ws[f'D{r}'] = 0\n        ws[f'E{r}'].value = 0\n        ws[f'E{r}'].fill = red_fill\n        ws[f'F{r}'] = 0\n        ws[f'G{r}'] = f\"ERROR: {str(e)}\"\n\n# Save to bytes & return to n8n\nwith BytesIO() as out_stream:\n    wb.save(out_stream)\n    out_stream.seek(0)\n    result_b64 = base64.b64encode(out_stream.read()).decode()\n\noutput_timestamped = f\"DDC_Revit_IFC_Validation__{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx\"\n\n# Use the same directory as the validation rules file\nfull_output_path = os.path.join(output_directory, output_timestamped)\n\nreturn [{\n    \"json\": {\n        \"filename\": output_timestamped,\n        \"full_path\": full_output_path\n    },\n    \"binary\": {\n        \"data\": {\n            \"data\":          result_b64,\n            \"fileName\":      output_timestamped,\n            \"fileExtension\": \"xlsx\",\n            \"mimeType\":      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        }\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1020,
        1180
      ],
      "id": "5e7107b6-cabb-43ee-a3d7-2d968f8a9153",
      "name": "Validate - Enhanced"
    },
    {
      "parameters": {
        "content": "## 🤖 AUTOMATED VALIDATION\n\nProcessing includes:\n- Project data analysis\n- Rules-based checking\n- Report creation with color coding\n\n🟩 Green = data present\n🟥 Red = data missing",
        "height": 596,
        "width": 620
      },
      "id": "0e8c5bdc-2c67-4485-8053-3b9b2a879362",
      "name": "Sticky Note - Validation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1500,
        940
      ]
    },
    {
      "parameters": {
        "content": "## 🔄 CONVERSION\n\nAutomatic conversion Project files → Excel\n\nIf file already exists, conversion is skipped",
        "height": 596,
        "width": 1320
      },
      "id": "f02ee0b2-1c6c-4b56-adf7-eb7b09064c3c",
      "name": "Sticky Note - Conversion",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3080,
        940
      ]
    },
    {
      "parameters": {
        "content": "## 📂 SAVE & OPEN\n\n✅ Report saved automatically\n✅ Excel opens for viewing\n\nFilename includes date and time",
        "height": 596,
        "width": 420,
        "color": 6
      },
      "id": "c3c4a3ac-ffb8-47f7-bc55-5c48cfc414f5",
      "name": "Sticky Note - Save & Open",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -860,
        940
      ]
    },
    {
      "parameters": {
        "fileName": "={{ $json.full_path }}",
        "options": {}
      },
      "id": "db26e9dd-a0c3-49f5-bd62-d6ebc3c166bc",
      "name": "Save Validation Report1",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        -780,
        1180
      ]
    },
    {
      "parameters": {
        "command": "=start \"\" \"{{ $json.full_path }}\""
      },
      "id": "138cc205-d8b3-42eb-b4d4-993c3f131b9a",
      "name": "Open Excel Report1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -560,
        1180
      ]
    },
    {
      "parameters": {
        "filePath": "={{ $json[\"xlsx_filename\"] }}"
      },
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -2840,
        1160
      ],
      "id": "88b52402-5e00-4e90-804d-4cc58c316601",
      "name": "Check - Does Excel file exist?",
      "alwaysOutputData": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "e7fb1577-e753-43f5-9f5a-4d5285aeb96e",
              "leftValue": "={{ $binary.data ? true : false }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "585e4b90-9c68-49e9-9390-7d545184834a",
      "name": "If - File exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2680,
        1160
      ]
    },
    {
      "parameters": {
        "command": "=\"{{$node[\"Setup - Define file paths\"].json[\"path_to_converter\"]}}\" \"{{$node[\"Setup - Define file paths\"].json[\"project_file\"]}}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -2460,
        1260
      ],
      "id": "1d766639-3a2f-4382-a3cb-28b1ff3b48ef",
      "name": "Extract - Run converter",
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "status-id",
              "name": "status",
              "value": "File already exists - skipping conversion",
              "type": "string"
            },
            {
              "id": "xlsx-filename-id",
              "name": "xlsx_filename",
              "value": "={{ $node[\"Create - Excel filename\"].json[\"xlsx_filename\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2380,
        1080
      ],
      "id": "47db95a6-1dce-48ca-9215-792a06aa8137",
      "name": "Info - Skip conversion"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $node[\"Extract - Run converter\"].json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "097927bb-b6b7-4e87-b2a3-eefb0658dc77",
      "name": "Check - Did extraction succeed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2300,
        1260
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-message-id",
              "name": "error_message",
              "value": "=Extraction failed: {{ $node[\"Extract - Run converter\"].json.error || \"Unknown error\" }}",
              "type": "string"
            },
            {
              "id": "error-code-id",
              "name": "error_code",
              "value": "={{ $node[\"Extract - Run converter\"].json.code || -1 }}",
              "type": "number"
            },
            {
              "id": "xlsx-filename-error",
              "name": "xlsx_filename",
              "value": "={{ $node[\"Create - Excel filename\"].json[\"xlsx_filename\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "148b4867-1f1d-4a29-ba57-9bd26527ad5c",
      "name": "Error - Show what went wrong",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2140,
        1180
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "xlsx-filename-success",
              "name": "xlsx_filename",
              "value": "={{ $node[\"Create - Excel filename\"].json[\"xlsx_filename\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2140,
        1340
      ],
      "id": "375a685d-cf25-45bd-a53b-35865381a093",
      "name": "Set xlsx_filename after success"
    },
    {
      "parameters": {},
      "id": "993c857f-7428-420f-b980-27d4bd784aab",
      "name": "Merge - Continue workflow",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1900,
        1100
      ]
    },
    {
      "parameters": {
        "content": "## ⚠️ Troubleshooting\nIf you encounter errors during conversion, be sure to reference the executable inside the **`datadrivenlibs`** folder. Use this path:\n\n```text\n\"DDC_Exporter_XXXXXXX\\datadrivenlibs\\RvtExporter.exe\"\n```\ninstead of:\n```text\n\"DDC_Exporter_XXXXXXX\\RvtExporter.exe\"\n```",
        "height": 300,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3080,
        1560
      ],
      "id": "cbbc29b9-663c-44e1-a940-254bdb330f6b",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## ⚠️ Troubleshooting\nIn n8n versions 1.98.0–1.101.x, the Python Code node (Pyodide) completely blocks the `os` module, causing this error:\n\n### ✅ Solution  \nTo avoid this error, **use latest n8n version 1.97** where the `os` module is not blocked.  \nYou can launch it with the following command:\n\n```bash\nnpx n8n@latest\n```",
        "height": 268,
        "width": 620
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1480,
        1560
      ],
      "id": "f895d82b-7622-42a0-9c42-31eb816c30b8",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "⭐ **If you find our tools helpful**, please **consider starring our repository** on [GitHub](https://github.com/datadrivenconstruction/cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto). \n\nYour support helps us improve and continue developing open solutions for the community!\n",
        "height": 116,
        "width": 340
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -780,
        800
      ],
      "id": "e1715f6d-1363-4549-bce8-bcb588cb0cb1",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## ⬇️ Only modify the variables here  \n— everything else works automatically",
        "height": 176,
        "width": 224,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3320,
        600
      ],
      "typeVersion": 1,
      "id": "eab7c51f-3e43-4fe4-a8d4-f482a2985b52",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## ⚙️ SETTINGS\n\n**Update file paths here:**\n- `path_to_converter` - path to converter\n- `project_file` - path to your project file (IFC/DWG/RVT)",
        "height": 628,
        "width": 220,
        "color": 4
      },
      "id": "cb484c63-09a1-471f-a119-dcade1e5aa8f",
      "name": "Sticky Note - Settings",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3320,
        780
      ]
    },
    {
      "parameters": {
        "content": "## ⬇️ Only modify the variables here  \n— everything else works automatically",
        "height": 176,
        "width": 224,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1740,
        540
      ],
      "typeVersion": 1,
      "id": "3573489e-15b7-4c34-87e1-1a85ad53c3be",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "xlsx-filename-id",
              "name": "xlsx_filename",
              "value": "={{ $json[\"project_file\"].slice(0, $json[\"project_file\"].lastIndexOf(\".\")) + \"_\" + $json[\"project_file\"].split(\".\").pop() + \".xlsx\" }}",
              "type": "string"
            },
            {
              "id": "path-to-converter-pass",
              "name": "path_to_converter",
              "value": "={{ $json[\"path_to_converter\"] }}",
              "type": "string"
            },
            {
              "id": "project-file-pass",
              "name": "project_file",
              "value": "={{ $json[\"project_file\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3040,
        1160
      ],
      "id": "3838d91e-b162-4c61-a186-854fa6d79645",
      "name": "Create - Excel filename"
    }
  ],
  "pinData": {},
  "connections": {
    "Start - Click to begin": {
      "main": [
        [
          {
            "node": "Setup - Define file paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup - Define file paths": {
      "main": [
        [
          {
            "node": "Create - Excel filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Project Excel File": {
      "main": [
        [
          {
            "node": "Merge Excel Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Validation Rules Path": {
      "main": [
        [
          {
            "node": "Read Validation Rules File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Validation Rules File": {
      "main": [
        [
          {
            "node": "Merge Excel Files",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Excel Files": {
      "main": [
        [
          {
            "node": "Validate - Enhanced",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate - Enhanced": {
      "main": [
        [
          {
            "node": "Save Validation Report1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Validation Report1": {
      "main": [
        [
          {
            "node": "Open Excel Report1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check - Does Excel file exist?": {
      "main": [
        [
          {
            "node": "If - File exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If - File exists?": {
      "main": [
        [
          {
            "node": "Info - Skip conversion",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract - Run converter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract - Run converter": {
      "main": [
        [
          {
            "node": "Check - Did extraction succeed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Info - Skip conversion": {
      "main": [
        [
          {
            "node": "Merge - Continue workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check - Did extraction succeed?": {
      "main": [
        [
          {
            "node": "Error - Show what went wrong",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set xlsx_filename after success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set xlsx_filename after success": {
      "main": [
        [
          {
            "node": "Merge - Continue workflow",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Error - Show what went wrong": {
      "main": [
        [
          {
            "node": "Merge - Continue workflow",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge - Continue workflow": {
      "main": [
        [
          {
            "node": "Read Project Excel File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Validation Rules Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create - Excel filename": {
      "main": [
        [
          {
            "node": "Check - Does Excel file exist?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2c375604-cef3-4185-95f6-f5535bb3de70",
  "meta": {
    "instanceId": "faa70e11b7175129a74fd834d3451fdc1862589b16d68ded03f91ca7b1ecca12"
  },
  "id": "nR8TzfUTFdOdCPMN",
  "tags": []
}