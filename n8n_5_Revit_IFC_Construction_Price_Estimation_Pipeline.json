{
  "name": "Full Project Cost Calculation DDC copy",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Находим поля категорий для анализа\nconst items = $input.all();\nif (items.length === 0) {\n  return [{json: {error: 'No grouped data found'}}];\n}\n\n// Получаем все заголовки из первого элемента\nconst headers = Object.keys(items[0].json);\n\n// Ищем поля категорий по приоритету\nconst categoryPatterns = [\n  { pattern: /^category$/i, type: 'Category' },\n  { pattern: /^ifc[\\s_-]?type$/i, type: 'IFC' },\n  { pattern: /^host[\\s_-]?category$/i, type: 'Host' },\n  { pattern: /^ifc[\\s_-]?export[\\s_-]?as$/i, type: 'Export' },\n  { pattern: /^layer$/i, type: 'Layer' }\n];\n\nlet categoryField = null;\nlet categoryFieldType = 'None';\n\n// Ищем поле категории\nfor (const header of headers) {\n  for (const {pattern, type} of categoryPatterns) {\n    if (pattern.test(header)) {\n      categoryField = header;\n      categoryFieldType = type;\n      break;\n    }\n  }\n  if (categoryField) break;\n}\n\n// Находим volumetric поля\nconst volumetricPatterns = /volume|area|length|count|quantity|thickness|perimeter|depth|size|dimension|weight|mass/i;\nconst volumetricFields = headers.filter(header => volumetricPatterns.test(header));\n\n// Собираем уникальные значения категорий если поле найдено\nconst categoryValues = new Set();\nif (categoryField) {\n  items.forEach(item => {\n    const value = item.json[categoryField];\n    if (value && value !== '' && value !== null) {\n      categoryValues.add(value);\n    }\n  });\n}\n\nconsole.log('Category field analysis:');\nconsole.log('- Field found:', categoryField || 'None');\nconsole.log('- Field type:', categoryFieldType);\nconsole.log('- Unique values:', categoryValues.size);\nconsole.log('- Volumetric fields:', volumetricFields.length);\n\n// Подготавливаем данные для AI классификации\nreturn [{\n  json: {\n    categoryField: categoryField,\n    categoryFieldType: categoryFieldType,\n    categoryValues: Array.from(categoryValues),\n    volumetricFields: volumetricFields,\n    groupedData: items.map(item => item.json),\n    totalGroups: items.length\n  }\n}];"
      },
      "id": "446f12c1-ae40-4a9f-87c8-99b6a992bc81",
      "name": "Find Category Fields1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8624,
        256
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем классификацию от AI и применяем к сгруппированным данным\nconst categoryInfo = $node['Find Category Fields1'].json;\nconst groupedData = categoryInfo.groupedData;\nconst categoryField = categoryInfo.categoryField;\nconst volumetricFields = categoryInfo.volumetricFields || [];\n\n// Извлекаем классификацию из AI ответа\nlet classifications = {};\nlet buildingCategories = [];\nlet drawingCategories = [];\n\ntry {\n  const aiResponse = $input.first().json;\n  const content = aiResponse.content || aiResponse.message || aiResponse.response || '';\n  \n  const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    const parsed = JSON.parse(jsonMatch[0]);\n    classifications = parsed.classifications || {};\n    buildingCategories = parsed.building_categories || [];\n    drawingCategories = parsed.drawing_categories || [];\n    console.log(`AI classified ${Object.keys(classifications).length} categories`);\n    console.log(`Building categories: ${buildingCategories.length}`);\n    console.log(`Drawing categories: ${drawingCategories.length}`);\n  }\n} catch (error) {\n  console.error('Error parsing AI classification:', error.message);\n}\n\n// Применяем классификацию к каждой группе\nreturn groupedData.map(group => {\n  let isBuildingElement = false;\n  let reason = '';\n  let confidence = 0;\n  \n  if (categoryField && group[categoryField]) {\n    // Проверяем классификацию по категории\n    const categoryValue = group[categoryField];\n    \n    if (classifications[categoryValue] !== undefined) {\n      isBuildingElement = classifications[categoryValue];\n      confidence = 95;\n      reason = `Category '${categoryValue}' classified by AI as ${isBuildingElement ? 'building element' : 'drawing/annotation'}`;\n    } else {\n      // Fallback: проверяем по ключевым словам\n      const lowerCategory = categoryValue.toLowerCase();\n      const drawingKeywords = /annotation|drawing|text|dimension|tag|view|sheet|grid|section|elevation|callout|revision|legend|symbol|mark|note|detail items|filled region|detail line/i;\n      const buildingKeywords = /wall|floor|roof|column|beam|door|window|stair|pipe|duct|equipment|fixture|furniture/i;\n      \n      if (drawingKeywords.test(lowerCategory)) {\n        isBuildingElement = false;\n        confidence = 85;\n        reason = `Category '${categoryValue}' matched drawing keywords`;\n      } else if (buildingKeywords.test(lowerCategory)) {\n        isBuildingElement = true;\n        confidence = 85;\n        reason = `Category '${categoryValue}' matched building keywords`;\n      } else {\n        // По умолчанию считаем строительным элементом если не очевидно обратное\n        isBuildingElement = true;\n        confidence = 70;\n        reason = `Category '${categoryValue}' assumed as building element (no clear match)`;\n      }\n    }\n  } else {\n    // Если нет категории, проверяем наличие объемных параметров\n    let hasSignificantVolumetricData = false;\n    let volumetricCount = 0;\n    \n    for (const field of volumetricFields) {\n      const value = parseFloat(group[field]);\n      if (!isNaN(value) && value > 0) {\n        hasSignificantVolumetricData = true;\n        volumetricCount++;\n      }\n    }\n    \n    isBuildingElement = hasSignificantVolumetricData;\n    confidence = hasSignificantVolumetricData ? 80 : 60;\n    reason = hasSignificantVolumetricData ? \n      `Has ${volumetricCount} volumetric parameters with values` : \n      'No category field and no significant volumetric data';\n  }\n  \n  return {\n    json: {\n      ...group,\n      is_building_element: isBuildingElement,\n      element_confidence: confidence,\n      element_reason: reason\n    }\n  };\n});"
      },
      "id": "45adb157-1f72-49d1-b7c9-c79327c3269b",
      "name": "Apply Classification to Groups1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        9120,
        256
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "message",
              "name": "message",
              "value": "Non-building elements (drawings, annotations, etc.)",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "00b052db-5382-483a-bb26-51d66d66dfbf",
      "name": "Non-Building Elements Output1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        9520,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "// Извлекаем и очищаем заголовки\n const items = $input.all();\n if (items.length === 0) {\n  throw new Error('No data found in Excel file');\n }\n\n// Собираем все уникальные заголовки\n const allHeaders = new Set();\n items.forEach(item => {\n  Object.keys(item.json).forEach(key => allHeaders.add(key));\n });\n\n// Очищаем заголовки от типов данных\n const headers = Array.from(allHeaders);\n const cleanedHeaders = headers.map(header => {\n  return header.replace(/:\\s*(string|double|int|float|boolean|number)\\s*$/i, '').trim();\n });\n\n// Создаем маппинг старых заголовков к новым\n const headerMapping = {};\n headers.forEach((oldHeader, index) => {\n  headerMapping[oldHeader] = cleanedHeaders[index];\n });\n\n// Получаем примеры значений\n const sampleValues = {};\n cleanedHeaders.forEach((header, index) => {\n  const originalHeader = headers[index];\n  for (const item of items) {\n    const value = item.json[originalHeader];\n    if (value !== null && value !== undefined && value !== '') {\n      sampleValues[header] = value;\n      break;\n    }\n  }\n  if (!sampleValues[header]) {\n    sampleValues[header] = null;\n  }\n });\n\n console.log(`Found ${headers.length} unique headers across ${items.length} items`);\n\n// Возвращаем всю необходимую информацию\n return [{\n  json: {\n    headers: cleanedHeaders,\n    originalHeaders: headers,\n    headerMapping: headerMapping,\n    sampleValues: sampleValues,\n    totalRows: items.length,\n    totalHeaders: headers.length,\n    // Сохраняем все исходные данные\n    rawData: items.map(item => item.json)\n  }\n }];"
      },
      "id": "5011cf17-4303-40a4-a45f-f450b89e01b4",
      "name": "Extract Headers and Data1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8896,
        -112
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are an expert in construction classification systems. Analyze building element groups and assign aggregation methods for grouping data.\n\nRules:\n1. 'sum' - for quantities that should be totaled:\n   - Volume, Area, Length, Width, Height, Depth, Size\n   - Count, Quantity, Number, Amount, Total\n   - Thickness, Perimeter, Dimension\n   - Weight, Mass, Load\n   - Any measurable physical property that accumulates\n\n2. 'mean' (average) - for rates and unit values:\n   - Price, Cost, Rate (per unit)\n   - Coefficient, Factor, Ratio\n   - Percentage, Percent\n   - Efficiency, Performance metrics\n   - Any per-unit or normalized values\n\n3. 'first' - for descriptive/categorical data:\n   - ID, Code, Number (when used as identifier)\n   - Name, Title, Description\n   - Type, Category, Class, Group\n   - Material, Component, Element\n   - Project, Building, Location\n   - Status, Phase, Stage\n   - Any text or categorical field\n\nIMPORTANT: \n- Analyze each header carefully\n- Consider both the header name AND sample value\n- Return aggregation rule for EVERY header provided\n- Use exact header names from input\n\nReturn ONLY valid JSON in this exact format:\n{\n  \"aggregation_rules\": {\n    \"Header1\": \"sum\",\n    \"Header2\": \"first\",\n    \"Header3\": \"mean\"\n  }\n}",
              "role": "system"
            },
            {
              "content": "Analyze these {{ $json.totalHeaders }} headers and determine aggregation method for each:\n\nHeaders with sample values:\n{{ JSON.stringify($json.sampleValues, null, 2) }}\n\nProvide aggregation rule for EACH header listed above."
            }
          ]
        },
        "options": {
          "temperature": 0.1
        }
      },
      "id": "bb188e7b-70d2-4958-a435-f8756146687a",
      "name": "AI Analyze All Headers1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        9072,
        -112
      ],
      "credentials": {
        "openAiApi": {
          "id": "5SwKOx6OOukR6C0w",
          "name": "OpenAi account n8n"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Обрабатываем ответ AI и применяем правила\n const aiResponse = $input.first().json;\n const headerData = $node['Extract Headers and Data1'].json;\n\n// Извлекаем правила из AI ответа\n let aiRules = {};\n try {\n  const content = aiResponse.content || aiResponse.message || aiResponse.response || '';\n  console.log('AI Response received, length:', content.length);\n  \n  // Ищем JSON в ответе\n  const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    const parsed = JSON.parse(jsonMatch[0]);\n    aiRules = parsed.aggregation_rules || parsed.parameter_aggregation || {};\n    console.log(`AI provided ${Object.keys(aiRules).length} rules`);\n  } else {\n    console.warn('No JSON found in AI response');\n  }\n } catch (error) {\n  console.error('Error parsing AI response:', error.message);\n }\n\n// Создаем финальные правила с дефолтами\n const finalRules = {};\n headerData.headers.forEach(header => {\n  if (aiRules[header]) {\n    finalRules[header] = aiRules[header];\n  } else {\n    // Применяем правила по умолчанию\n    const lowerHeader = header.toLowerCase();\n    \n    if (lowerHeader.match(/volume|area|length|width|height|count|quantity|thickness|perimeter|depth|size|dimension|weight|mass|total|amount|number/)) {\n      finalRules[header] = 'sum';\n    } else if (lowerHeader.match(/price|rate|cost|coefficient|factor|percent|ratio|efficiency|avg|average|mean/)) {\n      finalRules[header] = 'mean';\n    } else {\n      finalRules[header] = 'first';\n    }\n  }\n });\n\n const groupByParam = $node['Setup - Define file paths'].json.group_by;\n\n console.log(`\\nAggregation rules summary:`);\n console.log(`- Total headers: ${headerData.headers.length}`);\n console.log(`- AI rules: ${Object.keys(aiRules).length}`);\n console.log(`- Default rules: ${headerData.headers.length - Object.keys(aiRules).length}`);\n console.log(`- Group by: ${groupByParam}`);\n\n// Возвращаем все данные для группировки\n return [{\n  json: {\n    aggregationRules: finalRules,\n    headerMapping: headerData.headerMapping,\n    headers: headerData.headers,\n    originalHeaders: headerData.originalHeaders,\n    rawData: headerData.rawData,\n    groupByParam: groupByParam,\n    totalRows: headerData.totalRows\n  }\n }];"
      },
      "id": "dfb8c0ba-48e1-43f4-ac1a-34fbffebb42a",
      "name": "Process AI Response1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        9456,
        -112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Выполняем группировку данных\n const input = $input.first().json;\n const aggregationRules = input.aggregationRules;\n const headerMapping = input.headerMapping;\n const rawData = input.rawData;\n const groupByParamOriginal = input.groupByParam;\n\n// Находим очищенное имя параметра группировки\n const groupByParam = headerMapping[groupByParamOriginal] || groupByParamOriginal;\n\n console.log(`Grouping ${rawData.length} items by: ${groupByParam}`);\n\n// Очищаем данные - переименовываем колонки\n const cleanedData = rawData.map(item => {\n  const cleaned = {};\n  Object.entries(item).forEach(([key, value]) => {\n    const newKey = headerMapping[key] || key;\n    cleaned[newKey] = value;\n  });\n  return cleaned;\n });\n\n// Группируем данные\n const grouped = {};\n\n// Первый проход - собираем все значения\n cleanedData.forEach(item => {\n  const groupKey = item[groupByParam];\n  \n  if (!groupKey || groupKey === '' || groupKey === null) return;\n  \n  if (!grouped[groupKey]) {\n    grouped[groupKey] = {\n      _count: 0,\n      _values: {}\n    };\n    \n    // Инициализируем массивы для всех параметров\n    Object.keys(aggregationRules).forEach(param => {\n      if (param !== groupByParam) {\n        grouped[groupKey]._values[param] = [];\n      }\n    });\n  }\n  \n  grouped[groupKey]._count++;\n  \n  // Собираем значения\n  Object.entries(item).forEach(([key, value]) => {\n    if (key === groupByParam) return;\n    \n    if (value !== null && value !== undefined && value !== '' && grouped[groupKey]._values[key]) {\n      grouped[groupKey]._values[key].push(value);\n    }\n  });\n });\n\n// Второй проход - применяем функции агрегации\n const result = [];\n\n Object.entries(grouped).forEach(([groupKey, groupData]) => {\n  const aggregated = {\n    [groupByParam]: groupKey,\n    'Element Count': groupData._count\n  };\n  \n  // Применяем агрегацию для каждого параметра\n  Object.entries(groupData._values).forEach(([param, values]) => {\n    const rule = aggregationRules[param] || 'first';\n    \n    if (values.length === 0) {\n      aggregated[param] = null;\n      return;\n    }\n    \n    switch(rule) {\n      case 'sum':\n        const numericValues = values.map(v => {\n          const num = parseFloat(String(v).replace(',', '.'));\n          return isNaN(num) ? 0 : num;\n        });\n        aggregated[param] = numericValues.reduce((a, b) => a + b, 0);\n        // Округляем до 2 знаков после запятой если нужно\n        if (aggregated[param] % 1 !== 0) {\n          aggregated[param] = Math.round(aggregated[param] * 100) / 100;\n        }\n        break;\n        \n      case 'mean':\n      case 'average':\n        const avgValues = values.map(v => {\n          const num = parseFloat(String(v).replace(',', '.'));\n          return isNaN(num) ? null : num;\n        }).filter(v => v !== null);\n        \n        if (avgValues.length > 0) {\n          const avg = avgValues.reduce((a, b) => a + b, 0) / avgValues.length;\n          aggregated[param] = Math.round(avg * 100) / 100;\n        } else {\n          aggregated[param] = values[0];\n        }\n        break;\n        \n      case 'first':\n      default:\n        aggregated[param] = values[0];\n        break;\n    }\n  });\n  \n  result.push({ json: aggregated });\n });\n\n// Сортируем результат\n result.sort((a, b) => {\n  const aVal = a.json[groupByParam];\n  const bVal = b.json[groupByParam];\n  if (aVal < bVal) return -1;\n  if (aVal > bVal) return 1;\n  return 0;\n });\n\n console.log(`\\nGrouping complete:`);\n console.log(`- Input items: ${cleanedData.length}`);\n console.log(`- Output groups: ${result.length}`);\n console.log(`- Parameters processed: ${Object.keys(aggregationRules).length}`);\n\n// Выводим примеры агрегации\n const rulesSummary = { sum: [], mean: [], first: [] };\n Object.entries(aggregationRules).forEach(([param, rule]) => {\n  if (rulesSummary[rule]) rulesSummary[rule].push(param);\n });\n\n console.log('\\nAggregation summary:');\n if (rulesSummary.sum.length > 0) {\n  console.log(`- SUM (${rulesSummary.sum.length}): ${rulesSummary.sum.slice(0, 5).join(', ')}${rulesSummary.sum.length > 5 ? '...' : ''}`);\n }\n if (rulesSummary.mean.length > 0) {\n  console.log(`- MEAN (${rulesSummary.mean.length}): ${rulesSummary.mean.slice(0, 5).join(', ')}${rulesSummary.mean.length > 5 ? '...' : ''}`);\n }\n if (rulesSummary.first.length > 0) {\n  console.log(`- FIRST (${rulesSummary.first.length}): ${rulesSummary.first.slice(0, 5).join(', ')}${rulesSummary.first.length > 5 ? '...' : ''}`);\n }\n\n return result;"
      },
      "id": "76e41c50-a052-45dc-baa8-11e27ab8eba3",
      "name": "Group Data with AI Rules1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8432,
        256
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are an expert in Revit, BIM (Building Information Modeling) and construction classification. Your task is to classify category values as either building elements or non-building elements (drawings, annotations, etc.).\n\nBuilding elements include:\n- Structural elements (walls, floors, roofs, columns, beams, foundations, slabs)\n- MEP elements (pipes, ducts, equipment, fixtures, mechanical equipment)\n- Architectural elements (doors, windows, stairs, railings, curtain walls)\n- Site elements (parking, roads, landscaping)\n- Furniture and fixtures\n- Any physical construction element that has volume, area, or physical properties\n\nNon-building elements include:\n- Drawings and sheets\n- Annotations, dimensions, text notes\n- Views, sections, elevations, plans\n- Tags, symbols, legends, schedules\n- Grids, levels, reference planes\n- Revision clouds, callouts, detail items\n- Lines, filled regions, detail lines\n- Any 2D documentation or annotation element\n\nIMPORTANT: Analyze the actual category name, not just keywords. For example:\n- \"Detail Items\" = non-building (annotation)\n- \"Plumbing Fixtures\" = building element\n- \"Room Tags\" = non-building (annotation)\n- \"Structural Columns\" = building element\n\nReturn ONLY valid JSON in this exact format:\n{\n  \"classifications\": {\n    \"category_value_1\": true,\n    \"category_value_2\": false\n  },\n  \"building_categories\": [\"list\", \"of\", \"building\", \"categories\"],\n  \"drawing_categories\": [\"list\", \"of\", \"drawing\", \"categories\"]\n}",
              "role": "system"
            },
            {
              "content": "{{ $json.categoryField ? `Classify these ${$json.categoryValues.length} category values from field '${$json.categoryField}' as building elements (true) or drawings/annotations (false):\n\nCategory values:\n${JSON.stringify($json.categoryValues, null, 2)}\n\nCategory field type: ${$json.categoryFieldType}` : 'No category field found. Please classify based on volumetric data presence.'}}"
            }
          ]
        },
        "options": {
          "maxTokens": 4000,
          "temperature": 0.1
        }
      },
      "id": "62c10655-2c57-4c18-aab7-597b16f2b947",
      "name": "AI Classify Categories1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        8784,
        256
      ],
      "credentials": {
        "openAiApi": {
          "id": "5SwKOx6OOukR6C0w",
          "name": "OpenAi account n8n"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.is_building_element }}",
              "value2": true
            }
          ]
        }
      },
      "id": "beef59b4-66b4-4206-b052-7046293acb4a",
      "name": "Is Building Element1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        9312,
        256
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9af8b6d4-3a3a-4c4a-8d4d-d5a8c2958f5f",
              "leftValue": "={{ $node['Process in Batches1'].context['noItemsLeft'] }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2967815b-6eda-4996-8470-77dd77dc33f9",
      "name": "Check If All Batches Done",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        8256,
        736
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get all accumulated data and prepare for reporting\nconst storedData = $getWorkflowStaticData('global');\nconst allProcessedItems = storedData.accumulatedData || [];\n\nconsole.log(`\\n=== BATCH PROCESSING COMPLETE ===`);\nconsole.log(`Total items processed: ${allProcessedItems.length}`);\n\n// Clear accumulated data for next run\nstoredData.accumulatedData = [];\n\n// Return all items for report generation\nreturn allProcessedItems;"
      },
      "id": "d208aba4-1b02-4695-bd47-5898f9790d00",
      "name": "Collect All Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8528,
        1056
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "fce4c1d8-a5b2-4859-8046-85d423e719b7",
      "name": "Process in Batches1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        8416,
        608
      ]
    },
    {
      "parameters": {
        "jsCode": "// Clean empty values from the item\nreturn $input.all().map(item => {\n  const cleanedJson = {};\n  Object.entries(item.json).forEach(([key, value]) => {\n    if (value !== null) {\n      if (typeof value === 'number') {\n        if (value !== 0 || key === 'Element Count') {\n          cleanedJson[key] = value;\n        }\n      } else if (value !== '') {\n        cleanedJson[key] = value;\n      }\n    }\n  });\n  return { json: cleanedJson };\n});"
      },
      "id": "a20e17d1-fc9b-4453-921c-0f0852fc410e",
      "name": "Clean Empty Values1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8592,
        608
      ]
    },
    {
      "parameters": {
        "content": "## 🏗️ BLOCK 2: ELEMENT CLASSIFICATION\n\n**What this block does:**\n- Finds category fields in data (Category, IFC Type, Host Category, etc.)\n- Uses AI (GPT-4) to classify categories into:\n  - Building elements (walls, floors, windows, doors, etc.)\n  - Drawing/annotation elements (dimensions, texts, views, etc.)\n- Applies classification to each data group\n- Splits data flow into building and non-building elements\n\n**Key nodes:**\n- `Find Category Fields` - searches for category fields\n- `AI Classify Categories1` - AI classification with GPT-4\n- `Is Building Element2` - splits data flow",
        "height": 352,
        "width": 2208,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        7536,
        128
      ],
      "typeVersion": 1,
      "id": "f1a82b31-6e13-40ec-9732-e5740485ec7b",
      "name": "Element Classification Block1"
    },
    {
      "parameters": {
        "content": "## 🧪 BLOCK 3: MATERIAL CLASSIFICATION AND ANALYSIS\n\n**What this block does:**\n- Processes building elements in batches for optimization\n- For each element determines:\n  - Material classification by 3 standards (EU/DE/US)\n  - Quantity units (m³, m², m, kg, pcs)\n  - Material density and conversion factors\n- Uses xAI Grok for detailed analysis\n- Accumulates results from all batches\n- Calculates material distribution and statistics\n\n**Key nodes:**\n- `Process in Batches` - batch processing\n- `AI Agent2` + `xAI Grok Chat Model3` - AI material analysis\n- `Calculate Material Distribution` - distribution calculation",
        "height": 480,
        "width": 2208,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        7536,
        512
      ],
      "typeVersion": 1,
      "id": "07fee5e6-d9b4-46dd-ad47-40e89b0f9909",
      "name": "Material Analysis Block1"
    },
    {
      "parameters": {
        "content": "## 🌍 BLOCK 4: CO2 CALCULATION AND REPORTING\n\n**What this block does:**\n- Calculates CO2 emissions based on:\n  - Material classifications\n  - Volumes/areas/quantities\n  - Typical density values\n  - CO2 emission factors (kg CO2/kg material)\n- Creates visualization data:\n  - Pie charts for distribution\n  - Bar charts for CO2 emissions\n  - Summary metrics\n- Generates Markdown format report\n- Exports results to Excel file with multiple sheets\n\n**Key nodes:**\n- `Estimate CO2 Emissions1` - CO2 emissions calculation\n- `Generate Report1` - creates text report\n- `Convert to Excel` - Excel export",
        "height": 464,
        "width": 2208,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        7536,
        1024
      ],
      "typeVersion": 1,
      "id": "bf467c0a-d470-4399-bf00-e3774fa920fd",
      "name": "CO2 Analysis and Reporting Block1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.userPrompt }}",
        "options": {
          "systemMessage": "={{ $json.systemPrompt }}"
        }
      },
      "id": "fd8d27bf-af74-4300-b38e-058aa5d94dc4",
      "name": "AI Agent Enhanced",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        8944,
        608
      ]
    },
    {
      "parameters": {
        "jsCode": "// Accumulate all processed items\nconst currentItem = $input.first();\nconst storedData = $getWorkflowStaticData('global');\n\n// Initialize accumulator if needed\nif (!storedData.accumulatedData) {\n  storedData.accumulatedData = [];\n}\n\n// Add current item to accumulated data\nstoredData.accumulatedData.push(currentItem);\n\nconsole.log(`Item processed. Total accumulated: ${storedData.accumulatedData.length} items`);\n\n// Return the current item to continue the flow\nreturn [currentItem];"
      },
      "id": "e8c6345b-b1c9-4989-bf6c-64572a19553a",
      "name": "Accumulate Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        9520,
        752
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-opus-4-20250514",
          "mode": "list",
          "cachedResultName": "Claude Opus 4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        8944,
        800
      ],
      "id": "4bb920fd-0342-4bab-8fa2-2d076f88db72",
      "name": "Anthropic Chat Model1",
      "credentials": {
        "anthropicApi": {
          "id": "af7za1FRO2jVYY9L",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all results and calculate project totals\nconst items = $input.all();\n\n// Initialize aggregators\nconst projectTotals = {\n  totalElements: 0,\n  totalMass: 0,\n  totalCO2: 0,\n  totalVolume: 0,\n  totalArea: 0,\n  byMaterial: {},\n  byCategory: {},\n  byImpact: {}\n};\n\n// Process each item\nitems.forEach(item => {\n  const data = item.json;\n  const elementCount = parseFloat(data['Element Count']) || 1;\n  const mass = parseFloat(data['Element Mass (tonnes)']) || 0;\n  const co2 = parseFloat(data['Total CO2 (tonnes CO2e)']) || 0;\n  const volume = parseFloat(data['Volume (m³)']) || 0;\n  const area = parseFloat(data['Area (m²)']) || 0;\n  const material = data['Material (EU Standard)'] || 'Unknown';\n  const category = data['Element Category'] || 'Unknown';\n  const impact = data['Impact Category'] || 'Unknown';\n  \n  // Update totals\n  projectTotals.totalElements += elementCount;\n  projectTotals.totalMass += mass;\n  projectTotals.totalCO2 += co2;\n  projectTotals.totalVolume += volume;\n  projectTotals.totalArea += area;\n  \n  // Aggregate by material\n  if (!projectTotals.byMaterial[material]) {\n    projectTotals.byMaterial[material] = {\n      elements: 0,\n      mass: 0,\n      co2: 0,\n      volume: 0,\n      types: new Set()\n    };\n  }\n  projectTotals.byMaterial[material].elements += elementCount;\n  projectTotals.byMaterial[material].mass += mass;\n  projectTotals.byMaterial[material].co2 += co2;\n  projectTotals.byMaterial[material].volume += volume;\n  projectTotals.byMaterial[material].types.add(data['Element Name']);\n  \n  // Aggregate by category\n  if (!projectTotals.byCategory[category]) {\n    projectTotals.byCategory[category] = {\n      elements: 0,\n      co2: 0\n    };\n  }\n  projectTotals.byCategory[category].elements += elementCount;\n  projectTotals.byCategory[category].co2 += co2;\n  \n  // Aggregate by impact\n  if (!projectTotals.byImpact[impact]) {\n    projectTotals.byImpact[impact] = {\n      elements: 0,\n      co2: 0\n    };\n  }\n  projectTotals.byImpact[impact].elements += elementCount;\n  projectTotals.byImpact[impact].co2 += co2;\n});\n\n// Add percentages and rankings to each item\nconst enrichedItems = items.map((item, index) => {\n  const data = item.json;\n  const co2 = parseFloat(data['Total CO2 (tonnes CO2e)']) || 0;\n  const mass = parseFloat(data['Element Mass (tonnes)']) || 0;\n  const elementCount = parseFloat(data['Element Count']) || 1;\n  \n  return {\n    json: {\n      ...data,\n      // Add project percentages\n      'CO2 % of Total': projectTotals.totalCO2 > 0 ? \n        ((co2 / projectTotals.totalCO2) * 100).toFixed(2) : '0.00',\n      'Mass % of Total': projectTotals.totalMass > 0 ? \n        ((mass / projectTotals.totalMass) * 100).toFixed(2) : '0.00',\n      'Elements % of Total': projectTotals.totalElements > 0 ? \n        ((elementCount / projectTotals.totalElements) * 100).toFixed(2) : '0.00',\n      // Add ranking\n      'CO2 Rank': index + 1,\n      // Project totals (same for all rows)\n      'Project Total Elements': projectTotals.totalElements,\n      'Project Total Mass (tonnes)': projectTotals.totalMass.toFixed(3),\n      'Project Total CO2 (tonnes)': projectTotals.totalCO2.toFixed(3),\n      'Project Total Volume (m³)': projectTotals.totalVolume.toFixed(2),\n      'Project Total Area (m²)': projectTotals.totalArea.toFixed(2)\n    }\n  };\n});\n\n// Sort by CO2 emissions (highest first)\nenrichedItems.sort((a, b) => \n  parseFloat(b.json['Total CO2 (tonnes CO2e)']) - parseFloat(a.json['Total CO2 (tonnes CO2e)'])\n);\n\n// Store aggregated data for summary\n$getWorkflowStaticData('global').projectTotals = projectTotals;\n\nreturn enrichedItems;"
      },
      "id": "dc67cf05-396f-401d-9123-530090a044fa",
      "name": "Calculate Project Totals4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8704,
        1056
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate professional McKinsey/Accenture style HTML report\nconst items = $input.all();\nconst projectTotals = $getWorkflowStaticData('global').projectTotals;\n\n// Calculate key metrics\nconst topMaterial = Object.entries(projectTotals.byMaterial)\n  .sort((a, b) => b[1].co2 - a[1].co2)[0];\nconst highImpactItems = items.filter(item => \n  parseFloat(item.json['Total CO2 (tonnes CO2e)']) >= projectTotals.totalCO2 * 0.05\n).length;\n\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Carbon Footprint Analysis | Executive Report</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        \n        body {\n            font-family: 'Arial', 'Helvetica Neue', sans-serif;\n            background: #ffffff;\n            color: #2e2e38;\n            line-height: 1.6;\n            font-size: 13px;\n        }\n        \n        .container {\n            max-width: 1100px;\n            margin: 0 auto;\n            padding: 40px 20px;\n        }\n        \n        /* Header - McKinsey style */\n        .header {\n            border-bottom: 3px solid #0061a0;\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .header h1 {\n            font-size: 32px;\n            font-weight: 300;\n            color: #0061a0;\n            margin-bottom: 8px;\n            letter-spacing: -0.5px;\n        }\n        \n        .header .subtitle {\n            color: #696969;\n            font-size: 16px;\n            font-weight: 400;\n        }\n        \n        /* Executive Summary - Accenture purple accent */\n        .executive-summary {\n            background: linear-gradient(to right, #460073 0%, #0061a0 100%);\n            color: white;\n            padding: 30px;\n            margin-bottom: 30px;\n            position: relative;\n        }\n        \n        .executive-summary h2 {\n            font-size: 20px;\n            font-weight: 400;\n            margin-bottom: 15px;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n        }\n        \n        .executive-summary p {\n            font-size: 15px;\n            line-height: 1.8;\n            opacity: 0.95;\n        }\n        \n        /* KPI Cards - McKinsey teal */\n        .kpi-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .kpi-card {\n            background: #ffffff;\n            border: 1px solid #e0e0e0;\n            padding: 25px;\n            position: relative;\n            transition: all 0.3s ease;\n        }\n        \n        .kpi-card:hover {\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            transform: translateY(-2px);\n        }\n        \n        .kpi-card.primary {\n            border-top: 4px solid #00a19a;\n        }\n        \n        .kpi-card.secondary {\n            border-top: 4px solid #460073;\n        }\n        \n        .kpi-value {\n            font-size: 36px;\n            font-weight: 300;\n            color: #0061a0;\n            margin-bottom: 8px;\n            line-height: 1;\n        }\n        \n        .kpi-label {\n            font-size: 12px;\n            color: #696969;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            font-weight: 600;\n        }\n        \n        .kpi-change {\n            position: absolute;\n            top: 20px;\n            right: 20px;\n            font-size: 11px;\n            color: #00a19a;\n            font-weight: 600;\n        }\n        \n        /* Insights Section - BCG green */\n        .insight-section {\n            background: #f8f8f8;\n            border-left: 5px solid #009a44;\n            padding: 25px 30px;\n            margin-bottom: 30px;\n        }\n        \n        .insight-section h3 {\n            color: #009a44;\n            font-size: 18px;\n            font-weight: 600;\n            margin-bottom: 12px;\n        }\n        \n        .insight-section p {\n            color: #2e2e38;\n            font-size: 14px;\n            line-height: 1.8;\n        }\n        \n        .insight-highlight {\n            color: #0061a0;\n            font-weight: 600;\n        }\n        \n        /* Data Tables - Professional style */\n        .table-container {\n            background: #ffffff;\n            border: 1px solid #e0e0e0;\n            margin-bottom: 30px;\n            overflow: hidden;\n        }\n        \n        .table-header {\n            background: #f5f5f5;\n            padding: 15px 20px;\n            border-bottom: 1px solid #e0e0e0;\n        }\n        \n        .table-header h3 {\n            font-size: 16px;\n            font-weight: 600;\n            color: #2e2e38;\n            margin: 0;\n        }\n        \n        table {\n            width: 100%;\n            border-collapse: collapse;\n            font-size: 13px;\n        }\n        \n        th {\n            background: #fafafa;\n            padding: 12px 15px;\n            text-align: left;\n            font-weight: 600;\n            color: #2e2e38;\n            border-bottom: 2px solid #e0e0e0;\n            font-size: 12px;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        td {\n            padding: 12px 15px;\n            border-bottom: 1px solid #f0f0f0;\n            color: #4a4a4a;\n        }\n        \n        tr:hover {\n            background: #f9f9f9;\n        }\n        \n        .value-highlight {\n            font-weight: 600;\n            color: #0061a0;\n        }\n        \n        /* Impact levels - Traffic light system */\n        .impact-critical {\n            display: inline-block;\n            padding: 3px 8px;\n            background: #dc3545;\n            color: white;\n            font-size: 11px;\n            font-weight: 600;\n            border-radius: 2px;\n        }\n        \n        .impact-high {\n            display: inline-block;\n            padding: 3px 8px;\n            background: #ff7043;\n            color: white;\n            font-size: 11px;\n            font-weight: 600;\n            border-radius: 2px;\n        }\n        \n        .impact-medium {\n            display: inline-block;\n            padding: 3px 8px;\n            background: #ffa726;\n            color: white;\n            font-size: 11px;\n            font-weight: 600;\n            border-radius: 2px;\n        }\n        \n        .impact-low {\n            display: inline-block;\n            padding: 3px 8px;\n            background: #66bb6a;\n            color: white;\n            font-size: 11px;\n            font-weight: 600;\n            border-radius: 2px;\n        }\n        \n        /* Progress bars */\n        .progress-bar {\n            background: #e0e0e0;\n            height: 6px;\n            border-radius: 3px;\n            overflow: hidden;\n            width: 100px;\n            display: inline-block;\n            vertical-align: middle;\n            margin-left: 10px;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background: #00a19a;\n            transition: width 0.3s ease;\n        }\n        \n        /* Action items - Professional blue-grey */\n        .action-box {\n            background: #f8f9fa;\n            border-left: 4px solid #0061a0;\n            padding: 25px 30px;\n            margin: 30px 0;\n        }\n        \n        .action-box h4 {\n            color: #2e2e38;\n            font-size: 16px;\n            font-weight: 600;\n            margin-bottom: 15px;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .action-list {\n            list-style: none;\n            padding: 0;\n        }\n        \n        .action-list li {\n            padding: 10px 0;\n            padding-left: 30px;\n            position: relative;\n            color: #4a4a4a;\n            line-height: 1.6;\n        }\n        \n        .action-list li:before {\n            content: \"→\";\n            position: absolute;\n            left: 0;\n            color: #0061a0;\n            font-weight: bold;\n        }\n        \n        /* Footer */\n        .footer {\n            margin-top: 50px;\n            padding-top: 20px;\n            border-top: 1px solid #e0e0e0;\n            text-align: center;\n            color: #696969;\n            font-size: 11px;\n        }\n        \n        .footer .logo {\n            font-weight: 600;\n            color: #0061a0;\n        }\n        \n        /* Print optimization */\n        @media print {\n            body { background: white; }\n            .container { padding: 20px; }\n            .table-container { box-shadow: none; border: 1px solid #ddd; }\n            .kpi-card { box-shadow: none; }\n        }\n        \n        /* Responsive */\n        @media (max-width: 768px) {\n            .kpi-grid { grid-template-columns: 1fr; }\n            .header h1 { font-size: 24px; }\n            .kpi-value { font-size: 28px; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <!-- Header -->\n        <div class=\"header\">\n            <h1>Carbon Footprint Analysis</h1>\n            <div class=\"subtitle\">Executive Summary Report | ${new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</div>\n        </div>\n        \n        <!-- Executive Summary -->\n        <div class=\"executive-summary\">\n            <h2>Executive Summary</h2>\n            <p>\n                Analysis reveals <strong>${projectTotals.totalCO2.toFixed(1)} tonnes CO2e</strong> of embodied carbon across \n                ${projectTotals.totalElements.toLocaleString()} building elements. The assessment identifies ${highImpactItems} \n                high-impact element groups contributing over 5% each to total emissions, presenting clear optimization opportunities.\n            </p>\n        </div>\n        \n        <!-- KPI Cards -->\n        <div class=\"kpi-grid\">\n            <div class=\"kpi-card primary\">\n                <div class=\"kpi-value\">${projectTotals.totalCO2.toFixed(0)}</div>\n                <div class=\"kpi-label\">Total CO2 Emissions</div>\n                <div class=\"kpi-change\">tonnes CO2e</div>\n            </div>\n            <div class=\"kpi-card secondary\">\n                <div class=\"kpi-value\">${((topMaterial[1].co2 / projectTotals.totalCO2) * 100).toFixed(0)}%</div>\n                <div class=\"kpi-label\">${topMaterial[0]} Impact</div>\n                <div class=\"kpi-change\">of total</div>\n            </div>\n            <div class=\"kpi-card primary\">\n                <div class=\"kpi-value\">${(projectTotals.totalCO2 / projectTotals.totalMass).toFixed(1)}</div>\n                <div class=\"kpi-label\">Average Intensity</div>\n                <div class=\"kpi-change\">kg CO2e/kg</div>\n            </div>\n            <div class=\"kpi-card secondary\">\n                <div class=\"kpi-value\">${Object.keys(projectTotals.byMaterial).length}</div>\n                <div class=\"kpi-label\">Material Types</div>\n                <div class=\"kpi-change\">identified</div>\n            </div>\n        </div>\n        \n        <!-- Key Insight -->\n        <div class=\"insight-section\">\n            <h3>Primary Finding</h3>\n            <p>\n                <span class=\"insight-highlight\">${topMaterial[0]}</span> represents the largest carbon impact at \n                <span class=\"insight-highlight\">${topMaterial[1].co2.toFixed(1)} tonnes CO2e</span>, accounting for \n                <span class=\"insight-highlight\">${((topMaterial[1].co2 / projectTotals.totalCO2) * 100).toFixed(0)}%</span> \n                of total emissions across ${topMaterial[1].elements.toLocaleString()} elements. This concentration presents \n                the primary opportunity for carbon reduction through material substitution or design optimization.\n            </p>\n        </div>\n        \n        <!-- Top Contributors Table -->\n        <div class=\"table-container\">\n            <div class=\"table-header\">\n                <h3>Top 10 Carbon Contributors</h3>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th style=\"width: 60px;\">Rank</th>\n                        <th>Element Group</th>\n                        <th>Material Type</th>\n                        <th style=\"width: 80px;\">Quantity</th>\n                        <th style=\"width: 100px;\">CO2 (tonnes)</th>\n                        <th style=\"width: 150px;\">% of Total</th>\n                        <th style=\"width: 80px;\">Priority</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${items.slice(0, 10).map((item, index) => {\n                        const data = item.json;\n                        const co2Percent = parseFloat(data['CO2 % of Total']);\n                        let impactClass = 'impact-low';\n                        let impactText = 'LOW';\n                        \n                        if (co2Percent >= 10) {\n                            impactClass = 'impact-critical';\n                            impactText = 'CRITICAL';\n                        } else if (co2Percent >= 5) {\n                            impactClass = 'impact-high';\n                            impactText = 'HIGH';\n                        } else if (co2Percent >= 2) {\n                            impactClass = 'impact-medium';\n                            impactText = 'MEDIUM';\n                        }\n                        \n                        return `\n                    <tr>\n                        <td>${index + 1}</td>\n                        <td class=\"value-highlight\">${data['Element Name']}</td>\n                        <td>${data['Material (EU Standard)']}</td>\n                        <td>${data['Element Count']}</td>\n                        <td class=\"value-highlight\">${parseFloat(data['Total CO2 (tonnes CO2e)']).toFixed(2)}</td>\n                        <td>\n                            ${co2Percent.toFixed(1)}%\n                            <div class=\"progress-bar\">\n                                <div class=\"progress-fill\" style=\"width: ${Math.min(co2Percent * 5, 100)}%\"></div>\n                            </div>\n                        </td>\n                        <td><span class=\"${impactClass}\">${impactText}</span></td>\n                    </tr>`;\n                    }).join('')}\n                </tbody>\n            </table>\n        </div>\n        \n        <!-- Material Analysis Table -->\n        <div class=\"table-container\">\n            <div class=\"table-header\">\n                <h3>Material Impact Analysis</h3>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Material Classification</th>\n                        <th style=\"width: 100px;\">Elements</th>\n                        <th style=\"width: 100px;\">Mass (t)</th>\n                        <th style=\"width: 100px;\">CO2 (t)</th>\n                        <th style=\"width: 150px;\">% of Total</th>\n                        <th style=\"width: 120px;\">Intensity</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${Object.entries(projectTotals.byMaterial)\n                        .sort((a, b) => b[1].co2 - a[1].co2)\n                        .slice(0, 6)\n                        .map(([material, data]) => {\n                            const percent = (data.co2 / projectTotals.totalCO2) * 100;\n                            return `\n                    <tr>\n                        <td class=\"value-highlight\">${material}</td>\n                        <td>${data.elements.toLocaleString()}</td>\n                        <td>${data.mass.toFixed(1)}</td>\n                        <td class=\"value-highlight\">${data.co2.toFixed(1)}</td>\n                        <td>\n                            ${percent.toFixed(1)}%\n                            <div class=\"progress-bar\">\n                                <div class=\"progress-fill\" style=\"width: ${Math.min(percent * 3, 100)}%\"></div>\n                            </div>\n                        </td>\n                        <td>${(data.co2 / data.mass).toFixed(2)} kg/kg</td>\n                    </tr>`;\n                        }).join('')}\n                </tbody>\n            </table>\n        </div>\n        \n        <!-- Action Items -->\n        <div class=\"action-box\">\n            <h4>Recommended Actions</h4>\n            <ul class=\"action-list\">\n                <li>Prioritize ${topMaterial[0]} optimization - potential ${(topMaterial[1].co2 * 0.2).toFixed(0)}t CO2e reduction with 20% improvement</li>\n                <li>Review specification for ${highImpactItems} high-impact element groups (>5% each of total)</li>\n                <li>Investigate low-carbon alternatives for top 3 materials: ${Object.entries(projectTotals.byMaterial).sort((a,b) => b[1].co2 - a[1].co2).slice(0,3).map(([m]) => m).join(', ')}</li>\n                <li>Focus on elements exceeding project average intensity of ${(projectTotals.totalCO2 / projectTotals.totalMass).toFixed(1)} kg CO2e per kg material</li>\n            </ul>\n        </div>\n        \n        <!-- Footer -->\n        <div class=\"footer\">\n            <p>\n                <span class=\"logo\">Carbon Footprint Analysis</span> • \n                Embodied Carbon Assessment (A1-A3) • \n                Generated ${new Date().toLocaleString()}\n            </p>\n            <p style=\"margin-top: 8px;\">\n                Powered by DataDrivenConstruction.io • \n                Detailed calculations available in accompanying Excel workbook\n            </p>\n        </div>\n    </div>\n</body>\n</html>`;\n\nreturn [{\n  json: {\n    html: html,\n    reportType: 'mckinsey-accenture-professional',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "00d04e14-84a3-46ca-a719-1f34bb67f53d",
      "name": "Generate HTML Report4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8928,
        1056
      ]
    },
    {
      "parameters": {
        "jsCode": "\n// Convert HTML to binary for file output\nconst html = $input.first().json.html;\nconst fileName = `CO2_Analysis_Report_${new Date().toISOString().slice(0,10)}.html`;\n\n// Return with 'data' as the default binary field name\nreturn [{\n  json: {\n    fileName: fileName  // Also pass filename in json for backup\n  },\n  binary: {\n    data: {\n      data: Buffer.from(html).toString('base64'),\n      mimeType: 'text/html',\n      fileName: fileName,\n      fileExtension: 'html'\n    }\n  }\n}];"
      },
      "id": "1ba4f64c-866e-4c33-a767-cd87938984e0",
      "name": "HTML to Binary4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        9248,
        1056
      ]
    },
    {
      "parameters": {
        "fileName": "={{ $binary.data.fileName }}",
        "options": {}
      },
      "id": "13f534e7-7475-4f36-a1be-2b1402764498",
      "name": "Write HTML Report4",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        9424,
        1056
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate compact professional HTML report\nconst items = $input.all();\nconst projectTotals = $getWorkflowStaticData('global').projectTotals;\n\n// Calculate key metrics\nconst topMaterial = Object.entries(projectTotals.byMaterial)\n  .sort((a, b) => b[1].co2 - a[1].co2)[0];\n\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Carbon Footprint Analysis | Executive Report</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background: #f5f5f5;\n            color: #333;\n            line-height: 1.5;\n            font-size: 14px;\n        }\n        \n        .container {\n            max-width: 1000px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        /* Header */\n        .header {\n            background: white;\n            padding: 20px 30px;\n            margin-bottom: 20px;\n            border-left: 4px solid #1e40af;\n            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n        \n        .header h1 {\n            font-size: 24px;\n            font-weight: 600;\n            color: #1e40af;\n            margin-bottom: 5px;\n        }\n        \n        .header .subtitle {\n            color: #6b7280;\n            font-size: 14px;\n        }\n        \n        /* Summary Cards */\n        .summary-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n            gap: 15px;\n            margin-bottom: 20px;\n        }\n        \n        .summary-card {\n            background: white;\n            padding: 20px;\n            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n            border-radius: 4px;\n        }\n        \n        .summary-card .value {\n            font-size: 28px;\n            font-weight: 600;\n            color: #1e40af;\n            margin-bottom: 5px;\n        }\n        \n        .summary-card .label {\n            font-size: 12px;\n            color: #6b7280;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        /* Key Insight */\n        .insight-box {\n            background: #1e40af;\n            color: white;\n            padding: 20px 30px;\n            margin-bottom: 20px;\n            border-radius: 4px;\n        }\n        \n        .insight-box h3 {\n            font-size: 18px;\n            margin-bottom: 10px;\n        }\n        \n        /* Data Tables */\n        .table-section {\n            background: white;\n            padding: 20px;\n            margin-bottom: 20px;\n            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n            border-radius: 4px;\n            overflow-x: auto;\n        }\n        \n        .table-section h2 {\n            font-size: 18px;\n            font-weight: 600;\n            color: #1e40af;\n            margin-bottom: 15px;\n        }\n        \n        table {\n            width: 100%;\n            border-collapse: collapse;\n            font-size: 13px;\n        }\n        \n        th {\n            background: #f3f4f6;\n            padding: 10px;\n            text-align: left;\n            font-weight: 600;\n            color: #374151;\n            border-bottom: 2px solid #e5e7eb;\n        }\n        \n        td {\n            padding: 10px;\n            border-bottom: 1px solid #e5e7eb;\n        }\n        \n        tr:hover {\n            background: #f9fafb;\n        }\n        \n        .highlight {\n            font-weight: 600;\n            color: #1e40af;\n        }\n        \n        /* Impact badges */\n        .impact-high { color: #dc2626; font-weight: 600; }\n        .impact-medium { color: #f59e0b; font-weight: 600; }\n        .impact-low { color: #10b981; font-weight: 600; }\n        \n        /* Charts placeholder */\n        .chart-grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 20px;\n        }\n        \n        .chart-box {\n            background: white;\n            padding: 20px;\n            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n            border-radius: 4px;\n            min-height: 200px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: #9ca3af;\n            text-align: center;\n        }\n        \n        /* Footer */\n        .footer {\n            text-align: center;\n            padding: 20px;\n            color: #6b7280;\n            font-size: 12px;\n        }\n        \n        /* Print styles */\n        @media print {\n            body { background: white; }\n            .container { padding: 0; }\n            .table-section, .summary-card { box-shadow: none; border: 1px solid #e5e7eb; }\n        }\n        \n        @media (max-width: 768px) {\n            .summary-grid { grid-template-columns: 1fr; }\n            .chart-grid { grid-template-columns: 1fr; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <!-- Header -->\n        <div class=\"header\">\n            <h1>Carbon Footprint Analysis Report</h1>\n            <div class=\"subtitle\">\n                ${new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })} • \n                ${items.length} Element Groups • \n                ${projectTotals.totalElements.toLocaleString()} Total Elements\n            </div>\n        </div>\n        \n        <!-- Summary Cards -->\n        <div class=\"summary-grid\">\n            <div class=\"summary-card\">\n                <div class=\"value\">${projectTotals.totalCO2.toFixed(0)}</div>\n                <div class=\"label\">Tonnes CO2e</div>\n            </div>\n            <div class=\"summary-card\">\n                <div class=\"value\">${(projectTotals.totalCO2 / projectTotals.totalMass).toFixed(1)}</div>\n                <div class=\"label\">kg CO2e/kg Average</div>\n            </div>\n            <div class=\"summary-card\">\n                <div class=\"value\">${Object.keys(projectTotals.byMaterial).length}</div>\n                <div class=\"label\">Material Types</div>\n            </div>\n            <div class=\"summary-card\">\n                <div class=\"value\">${((topMaterial[1].co2 / projectTotals.totalCO2) * 100).toFixed(0)}%</div>\n                <div class=\"label\">Top Material Impact</div>\n            </div>\n        </div>\n        \n        <!-- Key Insight -->\n        <div class=\"insight-box\">\n            <h3>Primary Carbon Driver: ${topMaterial[0]}</h3>\n            <p>${topMaterial[0]} accounts for ${topMaterial[1].co2.toFixed(1)} tonnes CO2e (${((topMaterial[1].co2 / projectTotals.totalCO2) * 100).toFixed(0)}% of total), \n            used in ${topMaterial[1].elements.toLocaleString()} elements with ${topMaterial[1].mass.toFixed(0)} tonnes total mass. \n            Consider low-carbon alternatives or design optimization for maximum impact.</p>\n        </div>\n        \n        <!-- Visual Charts Placeholder -->\n        <div class=\"chart-grid\">\n            <div class=\"chart-box\">\n                <div>\n                    <h3>Material Distribution</h3>\n                    <p>Pie chart showing CO2 by material type</p>\n                    <p style=\"font-size: 11px; margin-top: 10px;\">See Excel file for detailed data</p>\n                </div>\n            </div>\n            <div class=\"chart-box\">\n                <div>\n                    <h3>Top 10 Contributors</h3>\n                    <p>Bar chart of highest CO2 elements</p>\n                    <p style=\"font-size: 11px; margin-top: 10px;\">See Excel file for detailed data</p>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Top Contributors Table -->\n        <div class=\"table-section\">\n            <h2>Top 10 Carbon Contributors</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th style=\"width: 50px;\">Rank</th>\n                        <th>Element</th>\n                        <th>Material</th>\n                        <th style=\"width: 80px;\">Count</th>\n                        <th style=\"width: 100px;\">CO2 (tonnes)</th>\n                        <th style=\"width: 80px;\">% of Total</th>\n                        <th style=\"width: 100px;\">Impact</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${items.slice(0, 10).map((item, index) => {\n                        const data = item.json;\n                        const co2Percent = parseFloat(data['CO2 % of Total']);\n                        const impactClass = co2Percent >= 5 ? 'impact-high' : co2Percent >= 2 ? 'impact-medium' : 'impact-low';\n                        const impactText = co2Percent >= 5 ? 'HIGH' : co2Percent >= 2 ? 'MEDIUM' : 'LOW';\n                        \n                        return `\n                    <tr>\n                        <td>${index + 1}</td>\n                        <td class=\"highlight\">${data['Element Name']}</td>\n                        <td>${data['Material (EU Standard)']}</td>\n                        <td>${data['Element Count']}</td>\n                        <td>${parseFloat(data['Total CO2 (tonnes CO2e)']).toFixed(2)}</td>\n                        <td>${co2Percent.toFixed(1)}%</td>\n                        <td class=\"${impactClass}\">${impactText}</td>\n                    </tr>`;\n                    }).join('')}\n                </tbody>\n            </table>\n        </div>\n        \n        <!-- Material Summary Table -->\n        <div class=\"table-section\">\n            <h2>Material Impact Summary</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Material</th>\n                        <th style=\"width: 100px;\">Elements</th>\n                        <th style=\"width: 100px;\">Mass (t)</th>\n                        <th style=\"width: 100px;\">CO2 (t)</th>\n                        <th style=\"width: 80px;\">% Total</th>\n                        <th style=\"width: 100px;\">kg CO2/kg</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${Object.entries(projectTotals.byMaterial)\n                        .sort((a, b) => b[1].co2 - a[1].co2)\n                        .slice(0, 5)\n                        .map(([material, data]) => `\n                    <tr>\n                        <td class=\"highlight\">${material}</td>\n                        <td>${data.elements.toLocaleString()}</td>\n                        <td>${data.mass.toFixed(1)}</td>\n                        <td>${data.co2.toFixed(1)}</td>\n                        <td>${((data.co2 / projectTotals.totalCO2) * 100).toFixed(1)}%</td>\n                        <td>${(data.co2 / data.mass).toFixed(2)}</td>\n                    </tr>`).join('')}\n                </tbody>\n            </table>\n        </div>\n        \n        <!-- Footer -->\n        <div class=\"footer\">\n            <p><strong>Carbon Footprint Analysis</strong> • Generated ${new Date().toLocaleString()}</p>\n            <p>Embodied carbon (A1-A3) only • Powered by DataDrivenConstruction.io</p>\n            <p style=\"margin-top: 10px; font-style: italic;\">📊 Complete analysis with all data available in accompanying Excel file</p>\n        </div>\n    </div>\n</body>\n</html>`;\n\nreturn [{\n  json: {\n    html: html,\n    reportType: 'compact-professional',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "269e5e46-c851-48fe-85e0-6bc4aab5fe37",
      "name": "Generate HTML Report6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8352,
        1264
      ],
      "disabled": true
    },
    {
      "parameters": {
        "content": "### HTML optional",
        "height": 208,
        "width": 464,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        8288,
        1216
      ],
      "typeVersion": 1,
      "id": "ed61727b-92ea-4366-bcf4-776f43265bd4",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// Generate professional HTML report in McKinsey/consulting style\nconst items = $input.all();\nconst projectTotals = $getWorkflowStaticData('global').projectTotals;\n\n// Calculate additional insights\nconst topMaterial = Object.entries(projectTotals.byMaterial)\n  .sort((a, b) => b[1].co2 - a[1].co2)[0];\nconst topCategory = Object.entries(projectTotals.byCategory)\n  .sort((a, b) => b[1].co2 - a[1].co2)[0];\n\n// Generate HTML\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Carbon Footprint Analysis | Executive Report</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: 'Helvetica Neue', Arial, sans-serif;\n            background-color: #fff;\n            color: #1a1a1a;\n            line-height: 1.6;\n            font-size: 14px;\n        }\n        \n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 40px 60px;\n        }\n        \n        /* Header Section */\n        .header {\n            border-bottom: 3px solid #003a70;\n            padding-bottom: 30px;\n            margin-bottom: 40px;\n        }\n        \n        .header h1 {\n            font-size: 36px;\n            font-weight: 300;\n            color: #003a70;\n            margin-bottom: 10px;\n            letter-spacing: -1px;\n        }\n        \n        .header .subtitle {\n            font-size: 18px;\n            color: #666;\n            font-weight: 300;\n        }\n        \n        .header .meta {\n            margin-top: 15px;\n            font-size: 13px;\n            color: #888;\n        }\n        \n        /* Executive Summary Box */\n        .executive-summary {\n            background: linear-gradient(135deg, #003a70 0%, #005eb8 100%);\n            color: white;\n            padding: 40px;\n            margin-bottom: 40px;\n            border-radius: 0;\n            position: relative;\n        }\n        \n        .executive-summary::after {\n            content: '';\n            position: absolute;\n            bottom: -20px;\n            left: 50px;\n            width: 0;\n            height: 0;\n            border-left: 20px solid transparent;\n            border-right: 20px solid transparent;\n            border-top: 20px solid #005eb8;\n        }\n        \n        .executive-summary h2 {\n            font-size: 24px;\n            font-weight: 300;\n            margin-bottom: 20px;\n            letter-spacing: 1px;\n        }\n        \n        .key-findings {\n            display: grid;\n            grid-template-columns: repeat(4, 1fr);\n            gap: 30px;\n            margin-top: 30px;\n        }\n        \n        .key-finding {\n            text-align: center;\n        }\n        \n        .key-finding .number {\n            font-size: 48px;\n            font-weight: 100;\n            line-height: 1;\n            margin-bottom: 5px;\n        }\n        \n        .key-finding .label {\n            font-size: 11px;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n            opacity: 0.8;\n        }\n        \n        /* Insights Section */\n        .insights {\n            margin-bottom: 50px;\n        }\n        \n        .insight-box {\n            display: grid;\n            grid-template-columns: 1fr 2fr;\n            gap: 40px;\n            margin-bottom: 40px;\n            padding: 30px;\n            background: #f8f9fa;\n            border-left: 4px solid #003a70;\n        }\n        \n        .insight-metric {\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n        }\n        \n        .insight-metric .big-number {\n            font-size: 64px;\n            font-weight: 100;\n            color: #003a70;\n            line-height: 1;\n        }\n        \n        .insight-metric .description {\n            font-size: 16px;\n            color: #666;\n            margin-top: 10px;\n        }\n        \n        .insight-details h3 {\n            color: #003a70;\n            font-size: 20px;\n            font-weight: 400;\n            margin-bottom: 15px;\n        }\n        \n        .insight-details p {\n            color: #555;\n            line-height: 1.8;\n            margin-bottom: 10px;\n        }\n        \n        /* Charts Section */\n        .chart-section {\n            margin-bottom: 50px;\n        }\n        \n        .chart-section h2 {\n            font-size: 28px;\n            font-weight: 300;\n            color: #003a70;\n            margin-bottom: 30px;\n            padding-bottom: 10px;\n            border-bottom: 2px solid #e0e0e0;\n        }\n        \n        /* Data Tables */\n        .data-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 40px;\n            background: white;\n            box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n        }\n        \n        .data-table th {\n            background: #003a70;\n            color: white;\n            padding: 15px;\n            text-align: left;\n            font-weight: 400;\n            font-size: 13px;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n        }\n        \n        .data-table td {\n            padding: 15px;\n            border-bottom: 1px solid #e0e0e0;\n            font-size: 14px;\n        }\n        \n        .data-table tr:hover {\n            background: #f8f9fa;\n        }\n        \n        .data-table .rank {\n            font-weight: 600;\n            color: #003a70;\n        }\n        \n        .data-table .highlight {\n            font-weight: 600;\n            color: #003a70;\n        }\n        \n        /* Impact Badges */\n        .impact-badge {\n            display: inline-block;\n            padding: 4px 12px;\n            border-radius: 3px;\n            font-size: 11px;\n            font-weight: 600;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .impact-very-high {\n            background: #dc3545;\n            color: white;\n        }\n        \n        .impact-high {\n            background: #fd7e14;\n            color: white;\n        }\n        \n        .impact-medium {\n            background: #ffc107;\n            color: #333;\n        }\n        \n        .impact-low {\n            background: #28a745;\n            color: white;\n        }\n        \n        .impact-very-low {\n            background: #17a2b8;\n            color: white;\n        }\n        \n        /* Confidence Indicators */\n        .confidence {\n            display: flex;\n            align-items: center;\n            gap: 5px;\n        }\n        \n        .confidence-bar {\n            width: 50px;\n            height: 8px;\n            background: #e0e0e0;\n            border-radius: 4px;\n            overflow: hidden;\n        }\n        \n        .confidence-fill {\n            height: 100%;\n            background: #003a70;\n            transition: width 0.3s;\n        }\n        \n        /* Methodology Section */\n        .methodology {\n            background: #f8f9fa;\n            padding: 40px;\n            margin-top: 60px;\n            border-top: 3px solid #003a70;\n        }\n        \n        .methodology h2 {\n            font-size: 24px;\n            font-weight: 300;\n            color: #003a70;\n            margin-bottom: 30px;\n        }\n        \n        .methodology-grid {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 30px;\n            margin-bottom: 30px;\n        }\n        \n        .methodology-item {\n            background: white;\n            padding: 25px;\n            border-left: 3px solid #005eb8;\n        }\n        \n        .methodology-item h3 {\n            color: #003a70;\n            font-size: 16px;\n            margin-bottom: 10px;\n            font-weight: 600;\n        }\n        \n        .methodology-item p {\n            color: #666;\n            font-size: 13px;\n            line-height: 1.6;\n        }\n        \n        /* Footer */\n        .footer {\n            margin-top: 60px;\n            padding-top: 30px;\n            border-top: 1px solid #e0e0e0;\n            text-align: center;\n            color: #888;\n            font-size: 12px;\n        }\n        \n        .footer a {\n            color: #003a70;\n            text-decoration: none;\n            font-weight: 600;\n        }\n        \n        .footer a:hover {\n            text-decoration: underline;\n        }\n        \n        /* Print Styles */\n        @media print {\n            body {\n                font-size: 11pt;\n            }\n            .container {\n                padding: 20px;\n            }\n            .executive-summary {\n                break-inside: avoid;\n            }\n            .data-table {\n                break-inside: avoid;\n            }\n        }\n        \n        /* Responsive */\n        @media (max-width: 768px) {\n            .key-findings {\n                grid-template-columns: repeat(2, 1fr);\n            }\n            .insight-box {\n                grid-template-columns: 1fr;\n            }\n            .methodology-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <!-- Header -->\n        <div class=\"header\">\n            <h1>Carbon Footprint Analysis</h1>\n            <div class=\"subtitle\">Embodied Carbon Assessment Report</div>\n            <div class=\"meta\">\n                ${new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })} | \n                ${items.length} Element Groups Analyzed | \n                ${projectTotals.totalElements.toLocaleString()} Total Elements\n            </div>\n        </div>\n        \n        <!-- Executive Summary -->\n        <div class=\"executive-summary\">\n            <h2>Executive Summary</h2>\n            <p style=\"font-size: 16px; line-height: 1.8; margin-bottom: 20px;\">\n                This analysis identifies <strong>${projectTotals.totalCO2.toFixed(1)} tonnes of CO2e</strong> \n                in embodied carbon across the project's building elements. The assessment covers \n                ${Object.keys(projectTotals.byMaterial).length} distinct materials and provides \n                actionable insights for carbon reduction strategies.\n            </p>\n            \n            <div class=\"key-findings\">\n                <div class=\"key-finding\">\n                    <div class=\"number\">${projectTotals.totalCO2.toFixed(0)}</div>\n                    <div class=\"label\">Tonnes CO2e</div>\n                </div>\n                <div class=\"key-finding\">\n                    <div class=\"number\">${(projectTotals.totalCO2 / projectTotals.totalMass).toFixed(1)}</div>\n                    <div class=\"label\">kg CO2e/kg Average</div>\n                </div>\n                <div class=\"key-finding\">\n                    <div class=\"number\">${Object.keys(projectTotals.byMaterial).length}</div>\n                    <div class=\"label\">Material Types</div>\n                </div>\n                <div class=\"key-finding\">\n                    <div class=\"number\">${((topMaterial[1].co2 / projectTotals.totalCO2) * 100).toFixed(0)}%</div>\n                    <div class=\"label\">Top Material Impact</div>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Key Insights -->\n        <div class=\"insights\">\n            <div class=\"insight-box\">\n                <div class=\"insight-metric\">\n                    <div class=\"big-number\">${((topMaterial[1].co2 / projectTotals.totalCO2) * 100).toFixed(0)}%</div>\n                    <div class=\"description\">of total emissions</div>\n                </div>\n                <div class=\"insight-details\">\n                    <h3>Primary Carbon Driver: ${topMaterial[0]}</h3>\n                    <p>\n                        ${topMaterial[0]} accounts for ${topMaterial[1].co2.toFixed(1)} tonnes CO2e, \n                        representing the largest opportunity for carbon reduction. This material is used in \n                        ${topMaterial[1].elements.toLocaleString()} elements with a total mass of \n                        ${topMaterial[1].mass.toFixed(0)} tonnes.\n                    </p>\n                    <p>\n                        <strong>Recommendation:</strong> Prioritize low-carbon alternatives for ${topMaterial[0]} \n                        or optimize design to reduce quantity while maintaining structural integrity.\n                    </p>\n                </div>\n            </div>\n            \n            <div class=\"insight-box\">\n                <div class=\"insight-metric\">\n                    <div class=\"big-number\">${items.filter(item => \n                        parseFloat(item.json['Total CO2 (tonnes CO2e)']) >= projectTotals.totalCO2 * 0.05\n                    ).length}</div>\n                    <div class=\"description\">high-impact groups</div>\n                </div>\n                <div class=\"insight-details\">\n                    <h3>Concentration of Impact</h3>\n                    <p>\n                        ${items.filter(item => \n                            parseFloat(item.json['Total CO2 (tonnes CO2e)']) >= projectTotals.totalCO2 * 0.05\n                        ).length} element groups each contribute more than 5% of total emissions, \n                        collectively accounting for ${items.filter(item => \n                            parseFloat(item.json['Total CO2 (tonnes CO2e)']) >= projectTotals.totalCO2 * 0.05\n                        ).reduce((sum, item) => sum + parseFloat(item.json['Total CO2 (tonnes CO2e)']), 0).toFixed(0)} \n                        tonnes CO2e.\n                    </p>\n                    <p>\n                        <strong>Implication:</strong> Focused optimization of these high-impact groups could yield \n                        significant carbon reductions with targeted interventions.\n                    </p>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Top Contributors Table -->\n        <div class=\"chart-section\">\n            <h2>Top Carbon Contributors</h2>\n            <table class=\"data-table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 60px;\">Rank</th>\n                        <th>Element Group</th>\n                        <th>Material</th>\n                        <th style=\"width: 100px;\">Count</th>\n                        <th style=\"width: 120px;\">CO2 (tonnes)</th>\n                        <th style=\"width: 100px;\">% of Total</th>\n                        <th style=\"width: 120px;\">Impact Level</th>\n                        <th style=\"width: 100px;\">Confidence</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${items.slice(0, 15).map((item, index) => {\n                        const data = item.json;\n                        const co2Percent = parseFloat(data['CO2 % of Total']);\n                        const confidence = parseFloat(data['Overall Confidence (%)']) || 0;\n                        \n                        let impactClass = 'very-low';\n                        if (co2Percent >= 10) impactClass = 'very-high';\n                        else if (co2Percent >= 5) impactClass = 'high';\n                        else if (co2Percent >= 2) impactClass = 'medium';\n                        else if (co2Percent >= 1) impactClass = 'low';\n                        \n                        return `\n                    <tr>\n                        <td class=\"rank\">${index + 1}</td>\n                        <td class=\"highlight\">${data['Element Name']}</td>\n                        <td>${data['Material (EU Standard)']}</td>\n                        <td>${data['Element Count']}</td>\n                        <td>${parseFloat(data['Total CO2 (tonnes CO2e)']).toFixed(2)}</td>\n                        <td>${co2Percent.toFixed(1)}%</td>\n                        <td>\n                            <span class=\"impact-badge impact-${impactClass}\">\n                                ${impactClass.replace('-', ' ')}\n                            </span>\n                        </td>\n                        <td>\n                            <div class=\"confidence\">\n                                <div class=\"confidence-bar\">\n                                    <div class=\"confidence-fill\" style=\"width: ${confidence}%\"></div>\n                                </div>\n                                <span>${confidence}%</span>\n                            </div>\n                        </td>\n                    </tr>\n                    `}).join('')}\n                </tbody>\n            </table>\n        </div>\n        \n        <!-- Material Analysis -->\n        <div class=\"chart-section\">\n            <h2>Material Impact Analysis</h2>\n            <table class=\"data-table\">\n                <thead>\n                    <tr>\n                        <th>Material Type</th>\n                        <th style=\"width: 100px;\">Elements</th>\n                        <th style=\"width: 120px;\">Mass (tonnes)</th>\n                        <th style=\"width: 120px;\">CO2 (tonnes)</th>\n                        <th style=\"width: 100px;\">% of Total</th>\n                        <th style=\"width: 120px;\">CO2 Intensity</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${Object.entries(projectTotals.byMaterial)\n                        .sort((a, b) => b[1].co2 - a[1].co2)\n                        .slice(0, 10)\n                        .map(([material, data]) => `\n                    <tr>\n                        <td class=\"highlight\">${material}</td>\n                        <td>${data.elements.toLocaleString()}</td>\n                        <td>${data.mass.toFixed(1)}</td>\n                        <td>${data.co2.toFixed(1)}</td>\n                        <td>${((data.co2 / projectTotals.totalCO2) * 100).toFixed(1)}%</td>\n                        <td>${(data.co2 / data.mass).toFixed(2)} kg/kg</td>\n                    </tr>\n                    `).join('')}\n                </tbody>\n            </table>\n        </div>\n        \n        <!-- Methodology -->\n        <div class=\"methodology\">\n            <h2>Methodology & Data Quality</h2>\n            \n            <div class=\"methodology-grid\">\n                <div class=\"methodology-item\">\n                    <h3>Classification Standards</h3>\n                    <p>\n                        Materials classified using EN 15978/15804 (European), \n                        ÖKOBAUDAT (German), and MasterFormat (US) standards to ensure \n                        comprehensive coverage and accuracy.\n                    </p>\n                </div>\n                \n                <div class=\"methodology-item\">\n                    <h3>Carbon Factors</h3>\n                    <p>\n                        Embodied carbon factors (A1-A3: Product stage) sourced from \n                        recognized databases including ICE, EPDs, and industry-specific \n                        LCA studies.\n                    </p>\n                </div>\n                \n                <div class=\"methodology-item\">\n                    <h3>AI-Powered Analysis</h3>\n                    <p>\n                        Advanced AI classification ensures accurate material identification \n                        and quantity extraction, with confidence scoring for transparency \n                        and quality assurance.\n                    </p>\n                </div>\n            </div>\n            \n            <p style=\"margin-top: 30px; padding: 20px; background: #e8f5e9; border-left: 4px solid #28a745; color: #2e7d32;\">\n                <strong>📊 Detailed Calculations Available:</strong> \n                Complete group-by-group calculations, raw data, and methodology details are provided \n                in the accompanying Excel workbook for full transparency and further analysis.\n            </p>\n        </div>\n        \n        <!-- Footer -->\n        <div class=\"footer\">\n            <p>\n                <strong>Carbon Footprint Analysis</strong> | \n                Generated ${new Date().toLocaleString()} | \n                Powered by <a href=\"https://DataDrivenConstruction.io\" target=\"_blank\">DataDrivenConstruction.io</a>\n            </p>\n            <p style=\"margin-top: 10px;\">\n                This report represents embodied carbon (A1-A3) only. Operational carbon and end-of-life impacts are not included.\n            </p>\n        </div>\n    </div>\n</body>\n</html>`;\n\nreturn [{\n  json: {\n    html: html,\n    reportType: 'professional-mckinsey',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "23cd2974-9706-4db4-bb42-0def05bf6f87",
      "name": "Generate HTML Report5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8560,
        1264
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Excel styling configuration\nconst excelBuffer = $input.first().binary.data;\nconst fileName = `CO2_Analysis_Professional_Report_${new Date().toISOString().slice(0,10)}.xlsx`;\n\n// Add metadata to the file\nconst metadata = {\n  title: 'Carbon Footprint Analysis Report',\n  author: 'DataDrivenConstruction.io',\n  company: 'Automated CO2 Analysis System',\n  created: new Date().toISOString(),\n  description: 'Comprehensive embodied carbon assessment with multi-standard material classification',\n  keywords: 'CO2, Carbon Footprint, Embodied Carbon, LCA, Building Materials'\n};\n\n// Return the enhanced Excel file\nreturn [{\n  json: {\n    fileName: fileName,\n    fileSize: excelBuffer.data.length,\n    sheets: 8,\n    metadata: metadata,\n    timestamp: new Date().toISOString()\n  },\n  binary: {\n    data: {\n      ...excelBuffer,\n      fileName: fileName,\n      fileExtension: 'xlsx',\n      mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    }\n  }\n}];"
      },
      "id": "f899b69a-c121-4312-9085-9e549cd8e84f",
      "name": "Enhance Excel Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        9248,
        1280
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare comprehensive data for multi-sheet Excel export\nconst items = $input.all();\nconst projectTotals = $getWorkflowStaticData('global').projectTotals;\n\n// Helper function to format numbers\nconst formatNumber = (num, decimals = 2) => {\n  return typeof num === 'number' ? parseFloat(num.toFixed(decimals)) : 0;\n};\n\n// Sheet 1: Executive Summary with project metrics\nconst executiveSummary = [\n  {\n    'Category': 'PROJECT OVERVIEW',\n    'Metric': 'Total Elements Analyzed',\n    'Value': projectTotals.totalElements,\n    'Unit': 'elements',\n    'Benchmark': 'N/A',\n    'Status': '✓',\n    'Notes': 'All building elements included in analysis'\n  },\n  {\n    'Category': 'PROJECT OVERVIEW',\n    'Metric': 'Element Groups',\n    'Value': items.length,\n    'Unit': 'groups',\n    'Benchmark': 'N/A',\n    'Status': '✓',\n    'Notes': 'Grouped by element type'\n  },\n  {\n    'Category': 'CARBON METRICS',\n    'Metric': 'Total Embodied Carbon',\n    'Value': formatNumber(projectTotals.totalCO2, 2),\n    'Unit': 'tonnes CO2e',\n    'Benchmark': 'Industry avg: ' + formatNumber(projectTotals.totalCO2 * 1.2, 0),\n    'Status': projectTotals.totalCO2 < projectTotals.totalCO2 * 1.2 ? '✓' : '⚠',\n    'Notes': 'A1-A3 lifecycle stages only'\n  },\n  {\n    'Category': 'CARBON METRICS',\n    'Metric': 'Average Carbon Intensity',\n    'Value': formatNumber(projectTotals.totalCO2 / projectTotals.totalMass, 3),\n    'Unit': 'kg CO2e/kg',\n    'Benchmark': '1.5-2.5',\n    'Status': (projectTotals.totalCO2 / projectTotals.totalMass) < 2.5 ? '✓' : '⚠',\n    'Notes': 'Average across all materials'\n  },\n  {\n    'Category': 'MATERIAL METRICS',\n    'Metric': 'Total Material Mass',\n    'Value': formatNumber(projectTotals.totalMass, 2),\n    'Unit': 'tonnes',\n    'Benchmark': 'N/A',\n    'Status': '✓',\n    'Notes': 'Combined mass of all materials'\n  },\n  {\n    'Category': 'MATERIAL METRICS',\n    'Metric': 'Unique Material Types',\n    'Value': Object.keys(projectTotals.byMaterial).length,\n    'Unit': 'materials',\n    'Benchmark': '10-20',\n    'Status': '✓',\n    'Notes': 'Distinct material classifications'\n  },\n  {\n    'Category': 'VOLUMETRIC DATA',\n    'Metric': 'Total Volume',\n    'Value': formatNumber(projectTotals.totalVolume, 2),\n    'Unit': 'm³',\n    'Benchmark': 'N/A',\n    'Status': '✓',\n    'Notes': 'Where volume data available'\n  },\n  {\n    'Category': 'VOLUMETRIC DATA',\n    'Metric': 'Total Area',\n    'Value': formatNumber(projectTotals.totalArea, 2),\n    'Unit': 'm²',\n    'Benchmark': 'N/A',\n    'Status': '✓',\n    'Notes': 'Where area data available'\n  }\n];\n\n// Sheet 2: Detailed Elements Analysis - ALL fields from processing\nconst detailedElements = items.map((item, index) => {\n  const data = item.json;\n  return {\n    // Ranking and identification\n    'CO2_Rank': index + 1,\n    'Element_Group': data['Element Name'] || data['Type Name'] || 'Unknown',\n    'Element_Category': data['Element Category'] || 'Unknown',\n    'Element_Type': data['Element Type'] || 'Unknown',\n    'Element_Function': data['Element Function'] || 'Unknown',\n    'Element_Count': parseInt(data['Element Count']) || 0,\n    \n    // Material classification (all 3 standards)\n    'Material_EU_Standard': data['Material (EU Standard)'] || 'Unknown',\n    'Material_DE_Standard': data['Material (DE Standard)'] || 'Unknown',\n    'Material_US_Standard': data['Material (US Standard)'] || 'Unknown',\n    'Primary_Material': data['Primary Material'] || 'Unknown',\n    'Secondary_Materials': data['Secondary Materials'] || 'None',\n    \n    // Quantities and dimensions\n    'Quantity_Value': formatNumber(data['Quantity'] || 0, 3),\n    'Quantity_Unit': data['Quantity Unit'] || 'piece',\n    'Volume_m3': formatNumber(data['Volume (m³)'] || 0, 3),\n    'Area_m2': formatNumber(data['Area (m²)'] || 0, 3),\n    'Length_mm': formatNumber(data['Length (mm)'] || 0, 0),\n    'Width_mm': formatNumber(data['Width (mm)'] || 0, 0),\n    'Height_mm': formatNumber(data['Height (mm)'] || 0, 0),\n    'Thickness_mm': formatNumber(data['Thickness (mm)'] || 0, 0),\n    \n    // Mass and density\n    'Material_Density_kg_m3': formatNumber(data['Material Density (kg/m³)'] || 0, 0),\n    'Element_Mass_kg': formatNumber(data['Element Mass (kg)'] || 0, 2),\n    'Element_Mass_tonnes': formatNumber(data['Element Mass (tonnes)'] || 0, 3),\n    \n    // CO2 emissions data\n    'CO2_Factor_kg_CO2_per_kg': formatNumber(data['CO2 Factor (kg CO2e/kg)'] || 0, 3),\n    'Total_CO2_kg': formatNumber(data['Total CO2 (kg CO2e)'] || 0, 2),\n    'Total_CO2_tonnes': formatNumber(data['Total CO2 (tonnes CO2e)'] || 0, 3),\n    'CO2_per_Element_kg': formatNumber(data['CO2 per Element (kg CO2e)'] || 0, 2),\n    'CO2_Intensity': formatNumber(data['CO2 Intensity'] || 0, 3),\n    'CO2_Percent_of_Total': formatNumber(data['CO2 % of Total'] || 0, 2),\n    \n    // Impact and quality metrics\n    'Impact_Category': data['Impact Category'] || 'Unknown',\n    'Lifecycle_Stage': data['Lifecycle Stage'] || 'A1-A3',\n    'Data_Source': data['Data Source'] || 'Industry average',\n    \n    // Confidence scores\n    'Overall_Confidence_%': parseInt(data['Overall Confidence (%)']) || 0,\n    'Material_Confidence_%': parseInt(data['Material Confidence (%)']) || 0,\n    'Quantity_Confidence_%': parseInt(data['Quantity Confidence (%)']) || 0,\n    'CO2_Confidence_%': parseInt(data['CO2 Confidence (%)']) || 0,\n    'Data_Quality': data['Data Quality'] || 'unknown',\n    \n    // Analysis metadata\n    'Calculation_Method': data['Calculation Method'] || 'Not specified',\n    'Assumptions': data['Assumptions'] || 'None',\n    'Warnings': data['Warnings'] || 'None',\n    'Analysis_Notes': data['Analysis Notes'] || '',\n    'Processing_Timestamp': data['Processing Timestamp'] || new Date().toISOString(),\n    'Analysis_Status': data['Analysis Status'] || 'Unknown'\n  };\n});\n\n// Sheet 3: Material Summary with detailed breakdown\nconst materialSummary = Object.entries(projectTotals.byMaterial)\n  .sort((a, b) => b[1].co2 - a[1].co2)\n  .map(([material, data], index) => {\n    const co2Percent = (data.co2 / projectTotals.totalCO2) * 100;\n    const massPercent = (data.mass / projectTotals.totalMass) * 100;\n    const avgCO2Factor = data.mass > 0 ? data.co2 / data.mass : 0;\n    \n    return {\n      'Rank': index + 1,\n      'Material_Type': material,\n      'Element_Count': data.elements,\n      'Unique_Types': data.types ? data.types.size : 0,\n      'Mass_tonnes': formatNumber(data.mass, 2),\n      'Mass_%': formatNumber(massPercent, 1),\n      'Volume_m3': formatNumber(data.volume, 2),\n      'CO2_tonnes': formatNumber(data.co2, 2),\n      'CO2_%': formatNumber(co2Percent, 1),\n      'Avg_CO2_Factor': formatNumber(avgCO2Factor, 3),\n      'CO2_per_Element_kg': formatNumber(data.co2 / data.elements * 1000, 1),\n      'Impact_Level': co2Percent >= 20 ? 'CRITICAL' : co2Percent >= 10 ? 'HIGH' : co2Percent >= 5 ? 'MEDIUM' : 'LOW',\n      'Reduction_Potential_20%': formatNumber(data.co2 * 0.2, 2),\n      'Benchmark_Factor': formatNumber(avgCO2Factor * 0.8, 3)\n    };\n  });\n\n// Sheet 4: Category Analysis\nconst categoryAnalysis = Object.entries(projectTotals.byCategory)\n  .sort((a, b) => b[1].co2 - a[1].co2)\n  .map(([category, data], index) => {\n    const co2Percent = (data.co2 / projectTotals.totalCO2) * 100;\n    const elementsPercent = (data.elements / projectTotals.totalElements) * 100;\n    \n    return {\n      'Rank': index + 1,\n      'Category': category,\n      'Element_Count': data.elements,\n      'Elements_%': formatNumber(elementsPercent, 1),\n      'CO2_tonnes': formatNumber(data.co2, 2),\n      'CO2_%': formatNumber(co2Percent, 1),\n      'Avg_CO2_per_Element': formatNumber(data.co2 / data.elements * 1000, 1),\n      'CO2_Intensity_Ratio': formatNumber((data.co2 / data.elements) / (projectTotals.totalCO2 / projectTotals.totalElements), 2),\n      'Priority': co2Percent >= 15 ? 'HIGH' : co2Percent >= 5 ? 'MEDIUM' : 'LOW'\n    };\n  });\n\n// Sheet 5: Impact Analysis by Category\nconst impactAnalysis = Object.entries(projectTotals.byImpact || {})\n  .map(([impact, data]) => ({\n    'Impact_Category': impact,\n    'Element_Count': data.elements,\n    'CO2_tonnes': formatNumber(data.co2, 2),\n    'CO2_%': formatNumber((data.co2 / projectTotals.totalCO2) * 100, 1),\n    'Avg_CO2_per_Element': formatNumber(data.co2 / data.elements * 1000, 1)\n  }));\n\n// Sheet 6: Top 20 Hotspots with action items\nconst top20Hotspots = items\n  .slice(0, 20)\n  .map((item, index) => {\n    const data = item.json;\n    const co2Tonnes = parseFloat(data['Total CO2 (tonnes CO2e)']) || 0;\n    const co2Percent = parseFloat(data['CO2 % of Total']) || 0;\n    const elementCount = parseInt(data['Element Count']) || 1;\n    \n    // Generate specific recommendations based on material and impact\n    let recommendation = '';\n    if (co2Percent >= 10) {\n      recommendation = 'CRITICAL: Prioritize immediate material substitution or design optimization';\n    } else if (co2Percent >= 5) {\n      recommendation = 'HIGH: Evaluate low-carbon alternatives and quantity reduction opportunities';\n    } else if (co2Percent >= 2) {\n      recommendation = 'MEDIUM: Consider optimization during value engineering phase';\n    } else {\n      recommendation = 'LOW: Monitor and optimize if convenient';\n    }\n    \n    return {\n      'Priority_Rank': index + 1,\n      'Element_Group': data['Element Name'] || 'Unknown',\n      'Category': data['Element Category'] || 'Unknown',\n      'Material': data['Material (EU Standard)'] || 'Unknown',\n      'Element_Count': elementCount,\n      'Mass_tonnes': formatNumber(data['Element Mass (tonnes)'] || 0, 2),\n      'CO2_tonnes': formatNumber(co2Tonnes, 3),\n      'CO2_%': formatNumber(co2Percent, 2),\n      'CO2_per_Element': formatNumber(co2Tonnes / elementCount * 1000, 1),\n      'Impact_Level': co2Percent >= 10 ? 'CRITICAL' : co2Percent >= 5 ? 'HIGH' : co2Percent >= 2 ? 'MEDIUM' : 'LOW',\n      'Confidence_%': parseInt(data['Overall Confidence (%)']) || 0,\n      'Reduction_Target_20%': formatNumber(co2Tonnes * 0.2, 2),\n      'Recommendation': recommendation\n    };\n  });\n\n// Sheet 7: Data Quality Report\nconst dataQuality = items.map((item, index) => {\n  const data = item.json;\n  return {\n    'Element_Rank': index + 1,\n    'Element_Group': data['Element Name'] || 'Unknown',\n    'Overall_Confidence_%': parseInt(data['Overall Confidence (%)']) || 0,\n    'Material_Confidence_%': parseInt(data['Material Confidence (%)']) || 0,\n    'Quantity_Confidence_%': parseInt(data['Quantity Confidence (%)']) || 0,\n    'CO2_Confidence_%': parseInt(data['CO2 Confidence (%)']) || 0,\n    'Data_Quality': data['Data Quality'] || 'unknown',\n    'Data_Source': data['Data Source'] || 'Unknown',\n    'Assumptions': data['Assumptions'] || 'None',\n    'Warnings': data['Warnings'] || 'None',\n    'Analysis_Status': data['Analysis Status'] || 'Unknown'\n  };\n}).filter(item => \n  item['Overall_Confidence_%'] < 90 || \n  item['Data_Quality'] !== 'high' || \n  item['Warnings'] !== 'None'\n);\n\n// Sheet 8: Recommendations Summary\nconst recommendations = [\n  {\n    'Priority': 1,\n    'Category': 'IMMEDIATE ACTIONS',\n    'Recommendation': `Focus on ${Object.entries(projectTotals.byMaterial).sort((a,b) => b[1].co2 - a[1].co2)[0][0]} optimization`,\n    'Potential_Savings': formatNumber(Object.entries(projectTotals.byMaterial).sort((a,b) => b[1].co2 - a[1].co2)[0][1].co2 * 0.2, 1) + ' tonnes CO2e',\n    'Implementation': 'Material substitution or design optimization',\n    'Timeline': '0-3 months'\n  },\n  {\n    'Priority': 2,\n    'Category': 'IMMEDIATE ACTIONS',\n    'Recommendation': `Review top ${items.filter(item => parseFloat(item.json['CO2 % of Total']) >= 5).length} high-impact element groups`,\n    'Potential_Savings': formatNumber(projectTotals.totalCO2 * 0.15, 1) + ' tonnes CO2e',\n    'Implementation': 'Design review and value engineering',\n    'Timeline': '0-3 months'\n  },\n  {\n    'Priority': 3,\n    'Category': 'SHORT TERM',\n    'Recommendation': 'Implement low-carbon concrete mixes where applicable',\n    'Potential_Savings': '10-15% reduction possible',\n    'Implementation': 'Specification updates',\n    'Timeline': '3-6 months'\n  },\n  {\n    'Priority': 4,\n    'Category': 'SHORT TERM',\n    'Recommendation': 'Increase recycled content in steel elements',\n    'Potential_Savings': '20-30% reduction possible',\n    'Implementation': 'Supplier engagement',\n    'Timeline': '3-6 months'\n  },\n  {\n    'Priority': 5,\n    'Category': 'MEDIUM TERM',\n    'Recommendation': 'Explore timber alternatives for suitable applications',\n    'Potential_Savings': 'Carbon negative potential',\n    'Implementation': 'Structural analysis required',\n    'Timeline': '6-12 months'\n  }\n];\n\n// Create worksheet structure with proper sheet names\nconst worksheets = [\n  { name: 'Executive Summary', data: executiveSummary },\n  { name: 'All Elements', data: detailedElements },\n  { name: 'Material Summary', data: materialSummary },\n  { name: 'Category Analysis', data: categoryAnalysis },\n  { name: 'Impact Analysis', data: impactAnalysis },\n  { name: 'Top 20 Hotspots', data: top20Hotspots },\n  { name: 'Data Quality', data: dataQuality },\n  { name: 'Recommendations', data: recommendations }\n];\n\n// Flatten all data with sheet markers\nconst allData = [];\nworksheets.forEach(sheet => {\n  sheet.data.forEach(row => {\n    allData.push({\n      json: {\n        ...row,\n        _sheetName: sheet.name\n      }\n    });\n  });\n});\n\nreturn allData;"
      },
      "id": "dd6f5e96-86f8-4cef-9939-5bc08b73d983",
      "name": "Prepare Excel Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8928,
        1280
      ]
    },
    {
      "parameters": {
        "operation": "toFile",
        "fileFormat": "xlsx",
        "options": {
          "fileName": "=CO2_Analysis_Report_{{ $now.format('yyyy-MM-dd') }}",
          "headerRow": true,
          "sheetName": "={{ $json._sheetName }}"
        }
      },
      "id": "d2c79721-3381-482a-a61c-dd87ededd705",
      "name": "Create Excel File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [
        9088,
        1280
      ]
    },
    {
      "parameters": {
        "fileName": "={{ $binary.data.fileName }}",
        "options": {}
      },
      "id": "fe8614d4-55d6-4314-a281-5be99a60baea",
      "name": "Write Excel Report",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        9424,
        1280
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced prompts for comprehensive CO2 analysis\nconst inputData = $input.first().json;\nconst originalGroupedData = { ...inputData };\n\nconst systemPrompt = `You are an expert in construction materials, carbon footprint analysis, and building element classification. Analyze the provided building element data and return a comprehensive CO2 emissions assessment.\n\nIMPORTANT NOTE ON DATA:\n- All quantitative fields like Volume, Area, Length, etc. in the input data represent ALREADY AGGREGATED TOTALS for the entire group of elements.\n- 'Element Count' indicates the number of individual elements in this group.\n- DO NOT multiply volumes/areas by Element Count - they are already total sums.\n- Use the provided totals directly for mass and CO2 calculations.\n- If no volumetric data is available, estimate based on typical values, but prioritize provided data.\n\n## Your Analysis Must Include:\n\n### 1. Element Identification\n- Element type and category\n- Primary material composition\n- Secondary materials if applicable\n- Functional classification\n\n### 2. Material Classification (All 3 Standards)\n- **European (EN 15978/15804)**: Concrete/Steel/Wood/Glass/Insulation/etc.\n- **German (ÖKOBAUDAT)**: Mineralische/Metalle/Holz/Dämmstoffe/etc.\n- **US (MasterFormat)**: Division classifications\n\n### 3. Quantity Analysis\n- Primary quantity with unit (m³, m², m, kg, pieces) - use aggregated total from input\n- Calculation method used (e.g., 'Direct from provided total volume')\n- Confidence level (0-100%)\n- Data quality assessment\n\n### 4. CO2 Emissions Calculation\n- Material density (kg/m³)\n- Mass calculation: Use total volume/area * density (do not multiply by count)\n- CO2 emission factor (kg CO2e/kg)\n- Total CO2 emissions (for the entire group)\n- Emission intensity metrics\n\n### 5. Data Quality & Confidence\n- Overall confidence score\n- Data completeness assessment\n- Key assumptions made\n- Warnings or limitations\n\n## Important Guidelines:\n1. Use industry-standard emission factors\n2. Apply conservative estimates when uncertain\n3. Consider full lifecycle emissions (A1-A3 minimum)\n4. Account for regional variations where relevant\n5. Include embodied carbon only (not operational)\n\n## Output Format\nReturn ONLY valid JSON with this exact structure:\n{\n  \"element_identification\": {\n    \"name\": \"string\",\n    \"category\": \"string\",\n    \"type\": \"string\",\n    \"function\": \"string\"\n  },\n  \"material_classification\": {\n    \"european\": \"string\",\n    \"german\": \"string\",\n    \"us\": \"string\",\n    \"primary_material\": \"string\",\n    \"secondary_materials\": [\"string\"]\n  },\n  \"quantities\": {\n    \"value\": number,\n    \"unit\": \"string\",\n    \"calculation_method\": \"string\",\n    \"raw_dimensions\": {\n      \"length\": number,\n      \"width\": number,\n      \"height\": number,\n      \"thickness\": number,\n      \"area\": number,\n      \"volume\": number\n    }\n  },\n  \"co2_analysis\": {\n    \"density_kg_m3\": number,\n    \"mass_kg\": number,\n    \"co2_factor_kg_co2_per_kg\": number,\n    \"total_co2_kg\": number,\n    \"co2_intensity_kg_per_unit\": number,\n    \"lifecycle_stage\": \"A1-A3\",\n    \"data_source\": \"string\"\n  },\n  \"confidence\": {\n    \"overall_score\": number,\n    \"material_confidence\": number,\n    \"quantity_confidence\": number,\n    \"co2_confidence\": number,\n    \"data_quality\": \"high/medium/low\"\n  },\n  \"metadata\": {\n    \"assumptions\": [\"string\"],\n    \"warnings\": [\"string\"],\n    \"notes\": \"string\"\n  }\n}`;\n\nconst userPrompt = `Analyze this building element group for CO2 emissions. Remember: Volumes and areas are already total for the group, not per element.\n\n${JSON.stringify(inputData, null, 2)}\n\nProvide comprehensive CO2 analysis following the specified format. Focus on accuracy and use conservative estimates where data is uncertain.`;\n\nreturn [{\n  json: {\n    ...originalGroupedData,\n    systemPrompt,\n    userPrompt,\n    _originalGroupedData: originalGroupedData\n  }\n}];"
      },
      "id": "27742cfa-f64d-45c6-840a-4bcf29baec7f",
      "name": "Prepare Enhanced Prompts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8768,
        608
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse and enrich AI response with all necessary data\nconst aiResponse = $input.first().json.output || $input.first().json.response || $input.first().json.text || $input.first().json;\nconst originalData = $node[\"Prepare Enhanced Prompts\"].json._originalGroupedData || $node[\"Prepare Enhanced Prompts\"].json;\n\ntry {\n  // Extract JSON from response\n  let jsonStr = aiResponse;\n  if (typeof jsonStr === 'string') {\n    const jsonMatch = jsonStr.match(/```json\\n?([\\s\\S]*?)\\n?```/) || jsonStr.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      jsonStr = jsonMatch[1] || jsonMatch[0];\n    }\n  }\n  \n  const analysis = typeof jsonStr === 'string' ? JSON.parse(jsonStr) : jsonStr;\n  \n  // Calculate additional metrics - use total CO2 for group\n  const co2_kg = analysis.co2_analysis?.total_co2_kg || 0;\n  const co2_tonnes = co2_kg / 1000;\n  const elementCount = parseFloat(originalData['Element Count']) || 1;\n  const co2_per_element = co2_kg / elementCount;\n  \n  // Determine impact category\n  let impactCategory = 'Unknown';\n  const co2Factor = analysis.co2_analysis?.co2_factor_kg_co2_per_kg || 0;\n  if (co2Factor < 0) {\n    impactCategory = 'Carbon Negative (Storage)';\n  } else if (co2Factor <= 0.5) {\n    impactCategory = 'Very Low Impact';\n  } else if (co2Factor <= 1.0) {\n    impactCategory = 'Low Impact';\n  } else if (co2Factor <= 2.0) {\n    impactCategory = 'Medium Impact';\n  } else if (co2Factor <= 5.0) {\n    impactCategory = 'High Impact';\n  } else {\n    impactCategory = 'Very High Impact';\n  }\n  \n  // Create comprehensive output record\n  return [{\n    json: {\n      // Original data\n      ...originalData,\n      \n      // Element identification\n      'Element Name': analysis.element_identification?.name || originalData['Type Name'] || 'Unknown',\n      'Element Category': analysis.element_identification?.category || originalData['Category'] || 'Unknown',\n      'Element Type': analysis.element_identification?.type || 'Unknown',\n      'Element Function': analysis.element_identification?.function || 'Unknown',\n      \n      // Material classification\n      'Material (EU Standard)': analysis.material_classification?.european || 'Unknown',\n      'Material (DE Standard)': analysis.material_classification?.german || 'Unknown',\n      'Material (US Standard)': analysis.material_classification?.us || 'Unknown',\n      'Primary Material': analysis.material_classification?.primary_material || 'Unknown',\n      'Secondary Materials': (analysis.material_classification?.secondary_materials || []).join(', ') || 'None',\n      \n      // Quantities\n      'Quantity': analysis.quantities?.value || 0,\n      'Quantity Unit': analysis.quantities?.unit || 'piece',\n      'Calculation Method': analysis.quantities?.calculation_method || 'Not specified',\n      \n      // Dimensions (from raw data) - these are totals\n      'Length (mm)': analysis.quantities?.raw_dimensions?.length || originalData['Length'] || 0,\n      'Width (mm)': analysis.quantities?.raw_dimensions?.width || originalData['Width'] || 0,\n      'Height (mm)': analysis.quantities?.raw_dimensions?.height || originalData['Height'] || 0,\n      'Thickness (mm)': analysis.quantities?.raw_dimensions?.thickness || originalData['Thickness'] || 0,\n      'Area (m²)': analysis.quantities?.raw_dimensions?.area || originalData['Area'] || 0,\n      'Volume (m³)': analysis.quantities?.raw_dimensions?.volume || originalData['Volume'] || 0,\n      \n      // CO2 Analysis\n      'Material Density (kg/m³)': analysis.co2_analysis?.density_kg_m3 || 0,\n      'Element Mass (kg)': analysis.co2_analysis?.mass_kg || 0,\n      'Element Mass (tonnes)': (analysis.co2_analysis?.mass_kg || 0) / 1000,\n      'CO2 Factor (kg CO2e/kg)': analysis.co2_analysis?.co2_factor_kg_co2_per_kg || 0,\n      'Total CO2 (kg CO2e)': co2_kg,\n      'Total CO2 (tonnes CO2e)': co2_tonnes,\n      'CO2 per Element (kg CO2e)': co2_per_element,\n      'CO2 Intensity': analysis.co2_analysis?.co2_intensity_kg_per_unit || 0,\n      'Lifecycle Stage': analysis.co2_analysis?.lifecycle_stage || 'A1-A3',\n      'Data Source': analysis.co2_analysis?.data_source || 'Industry average',\n      'Impact Category': impactCategory,\n      \n      // Confidence scores\n      'Overall Confidence (%)': analysis.confidence?.overall_score || 0,\n      'Material Confidence (%)': analysis.confidence?.material_confidence || 0,\n      'Quantity Confidence (%)': analysis.confidence?.quantity_confidence || 0,\n      'CO2 Confidence (%)': analysis.confidence?.co2_confidence || 0,\n      'Data Quality': analysis.confidence?.data_quality || 'unknown',\n      \n      // Metadata\n      'Assumptions': (analysis.metadata?.assumptions || []).join('; ') || 'None',\n      'Warnings': (analysis.metadata?.warnings || []).join('; ') || 'None',\n      'Analysis Notes': analysis.metadata?.notes || '',\n      'Processing Timestamp': new Date().toISOString(),\n      'Analysis Status': 'Complete'\n    }\n  }];\n  \n} catch (error) {\n  // Return error record with original data preserved\n  return [{\n    json: {\n      ...originalData,\n      'Analysis Status': 'Failed',\n      'Error': error.message,\n      'Processing Timestamp': new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "66c121f2-0c27-4432-a13d-fac7ff73d416",
      "name": "Parse Enhanced Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        9296,
        608
      ]
    },
    {
      "parameters": {
        "content": "## 🔄 CONVERSION\n\nAutomatic conversion Project files → Excel\n\nIf file already exists, conversion is skipped",
        "height": 500,
        "width": 2216,
        "color": 5
      },
      "id": "2a351607-61df-4ddd-8914-700cb56ed77e",
      "name": "Sticky Note - Conversion1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        7536,
        -720
      ]
    },
    {
      "parameters": {
        "filePath": "={{ $json.path_to_file }}"
      },
      "id": "74367cf7-6e16-4acd-924f-d9a0850852be",
      "name": "Read Excel File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        8432,
        -112
      ]
    },
    {
      "parameters": {
        "fileFormat": "xlsx",
        "options": {
          "headerRow": true,
          "includeEmptyCells": false,
          "sheetName": "={{ $node['Set Parameters'].json.sheet_name }}"
        }
      },
      "id": "dfca8f78-ef47-415a-90c3-f46e34a4136d",
      "name": "Parse Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [
        8624,
        -112
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9cbd4ec9-df24-41e8-b47a-720a4cdb733b",
              "name": "path_to_converter",
              "value": "C:\\Users\\Artem Boiko\\Desktop\\n8n pipelines\\DDC_Converter_Revit\\datadrivenlibs\\RvtExporter.exe",
              "type": "string"
            },
            {
              "id": "aa834467-80fb-476a-bac1-6728478834f0",
              "name": "project_file",
              "value": "C:\\Users\\Artem Boiko\\Desktop\\n8n pipelines\\Validation\\2023 racbasicsampleproject.rvt",
              "type": "string"
            },
            {
              "id": "4e4f5e6f-7a8b-4c5d-9e0f-1a2b3c4d5e6f",
              "name": "group_by",
              "value": "Type Name",
              "type": "string"
            },
            {
              "id": "5f6a7b8c-9d0e-4f1a-2b3c-4d5e6f7a8b9c",
              "name": "country",
              "value": "Germany",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        8112,
        -640
      ],
      "id": "ca2175c2-088d-47fa-8352-400b6f30ee89",
      "name": "Setup - Define file paths"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "xlsx-filename-id",
              "name": "xlsx_filename",
              "value": "={{ $json[\"project_file\"].slice(0, -4) + \"_rvt.xlsx\" }}",
              "type": "string"
            },
            {
              "id": "path-to-converter-pass",
              "name": "path_to_converter",
              "value": "={{ $json[\"path_to_converter\"] }}",
              "type": "string"
            },
            {
              "id": "project-file-pass",
              "name": "project_file",
              "value": "={{ $json[\"project_file\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        8304,
        -640
      ],
      "id": "c11bea70-8f98-4ceb-8b0a-91de0588105f",
      "name": "Create - Excel filename"
    },
    {
      "parameters": {
        "filePath": "={{ $json[\"xlsx_filename\"] }}"
      },
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        8496,
        -640
      ],
      "id": "80b17247-a4a0-43da-9e30-602b6bf12164",
      "name": "Check - Does Excel file exist?",
      "alwaysOutputData": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "e7fb1577-e753-43f5-9f5a-4d5285aeb96e",
              "leftValue": "={{ $binary.data ? true : false }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b801c611-3c70-4aa0-b7d0-c0eaa44bace4",
      "name": "If - File exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        8672,
        -640
      ]
    },
    {
      "parameters": {
        "command": "=\"{{$node[\"Setup - Define file paths\"].json[\"path_to_converter\"]}}\" \"{{$node[\"Setup - Define file paths\"].json[\"project_file\"]}}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        8880,
        -512
      ],
      "id": "ca46e415-656e-4974-9363-9720ae470435",
      "name": "Extract - Run converter",
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "status-id",
              "name": "status",
              "value": "File already exists - skipping conversion",
              "type": "string"
            },
            {
              "id": "xlsx-filename-id",
              "name": "xlsx_filename",
              "value": "={{ $node[\"Create - Excel filename\"].json[\"xlsx_filename\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        8880,
        -688
      ],
      "id": "d3e1e6bf-d7e7-4b54-9b5c-b384291ada28",
      "name": "Info - Skip conversion"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $node[\"Extract - Run converter\"].json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4e244fb5-793a-4051-afc7-a0b848ef5a73",
      "name": "Check - Did extraction succeed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        9040,
        -512
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-message-id",
              "name": "error_message",
              "value": "=Extraction failed: {{ $node[\"Extract - Run converter\"].json.error || \"Unknown error\" }}",
              "type": "string"
            },
            {
              "id": "error-code-id",
              "name": "error_code",
              "value": "={{ $node[\"Extract - Run converter\"].json.code || -1 }}",
              "type": "number"
            },
            {
              "id": "xlsx-filename-error",
              "name": "xlsx_filename",
              "value": "={{ $node[\"Create - Excel filename\"].json[\"xlsx_filename\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "0b23579c-bf88-4085-8236-365767973091",
      "name": "Error - Show what went wrong",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        9232,
        -560
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "xlsx-filename-success",
              "name": "xlsx_filename",
              "value": "={{ $node[\"Create - Excel filename\"].json[\"xlsx_filename\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        9232,
        -400
      ],
      "id": "039c730e-f9c6-45cc-878e-c8642378c077",
      "name": "Set xlsx_filename after success"
    },
    {
      "parameters": {},
      "id": "3fbc6f1e-1ef1-4d08-8b3a-b188d7f22dd8",
      "name": "Merge - Continue workflow",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        9408,
        -672
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "path-id",
              "name": "path_to_file",
              "value": "={{ $json.xlsx_filename }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9d149ec2-f777-4ded-8f6b-9385fea98ba8",
      "name": "Set Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        9552,
        -384
      ]
    },
    {
      "parameters": {
        "content": "## 📊 BLOCK 1: DATA LOADING AND PROCESSING\n\n**What this block does:**\n- Loads Excel file from specified path\n- Extracts column headers and cleans them from data types\n- Analyzes headers using AI to determine aggregation rules (sum/mean/first)\n- Groups data by specified parameter (e.g., by Type Name)\n- Applies aggregation rules to create pivot table\n\n**Key nodes:**\n- `Set Parameters2` - sets file path and grouping parameters\n- `AI Analyze All Headers3` - uses GPT-3.5 to analyze headers\n- `Group Data with AI Rules2` - performs grouping with AI rules applied",
        "height": 320,
        "width": 2208,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        7536,
        -208
      ],
      "typeVersion": 1,
      "id": "d4c3d169-34ef-44d9-9a90-0999f7996f00",
      "name": "Data Loading Block1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        7952,
        -640
      ],
      "id": "bc244fbc-c214-446c-8643-9b8ae46838e2",
      "name": "When clicking ‘Execute workflow’"
    }
  ],
  "pinData": {},
  "connections": {
    "Find Category Fields1": {
      "main": [
        [
          {
            "node": "AI Classify Categories1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Classification to Groups1": {
      "main": [
        [
          {
            "node": "Is Building Element1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Headers and Data1": {
      "main": [
        [
          {
            "node": "AI Analyze All Headers1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analyze All Headers1": {
      "main": [
        [
          {
            "node": "Process AI Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response1": {
      "main": [
        [
          {
            "node": "Group Data with AI Rules1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Group Data with AI Rules1": {
      "main": [
        [
          {
            "node": "Find Category Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Classify Categories1": {
      "main": [
        [
          {
            "node": "Apply Classification to Groups1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Building Element1": {
      "main": [
        [
          {
            "node": "Process in Batches1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Non-Building Elements Output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If All Batches Done": {
      "main": [
        [
          {
            "node": "Collect All Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process in Batches1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect All Results": {
      "main": [
        [
          {
            "node": "Calculate Project Totals4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process in Batches1": {
      "main": [
        [
          {
            "node": "Clean Empty Values1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Empty Values1": {
      "main": [
        [
          {
            "node": "Prepare Enhanced Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Enhanced": {
      "main": [
        [
          {
            "node": "Parse Enhanced Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Accumulate Results": {
      "main": [
        [
          {
            "node": "Check If All Batches Done",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Enhanced",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Project Totals4": {
      "main": [
        [
          {
            "node": "Generate HTML Report4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Excel Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate HTML Report4": {
      "main": [
        [
          {
            "node": "HTML to Binary4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML to Binary4": {
      "main": [
        [
          {
            "node": "Write HTML Report4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhance Excel Output": {
      "main": [
        [
          {
            "node": "Write Excel Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Excel Data": {
      "main": [
        [
          {
            "node": "Create Excel File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Excel File": {
      "main": [
        [
          {
            "node": "Enhance Excel Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Enhanced Prompts": {
      "main": [
        [
          {
            "node": "AI Agent Enhanced",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Enhanced Response": {
      "main": [
        [
          {
            "node": "Accumulate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Excel File": {
      "main": [
        [
          {
            "node": "Parse Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Excel": {
      "main": [
        [
          {
            "node": "Extract Headers and Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup - Define file paths": {
      "main": [
        [
          {
            "node": "Create - Excel filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create - Excel filename": {
      "main": [
        [
          {
            "node": "Check - Does Excel file exist?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check - Does Excel file exist?": {
      "main": [
        [
          {
            "node": "If - File exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If - File exists?": {
      "main": [
        [
          {
            "node": "Info - Skip conversion",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract - Run converter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract - Run converter": {
      "main": [
        [
          {
            "node": "Check - Did extraction succeed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Info - Skip conversion": {
      "main": [
        [
          {
            "node": "Merge - Continue workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check - Did extraction succeed?": {
      "main": [
        [
          {
            "node": "Error - Show what went wrong",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set xlsx_filename after success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error - Show what went wrong": {
      "main": [
        [
          {
            "node": "Merge - Continue workflow",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set xlsx_filename after success": {
      "main": [
        [
          {
            "node": "Merge - Continue workflow",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge - Continue workflow": {
      "main": [
        [
          {
            "node": "Set Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Parameters": {
      "main": [
        [
          {
            "node": "Read Excel File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Setup - Define file paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a8ebc1e0-831e-4fbc-bbeb-5f184015156e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "faa70e11b7175129a74fd834d3451fdc1862589b16d68ded03f91ca7b1ecca12"
  },
  "id": "xF75jptnYE9peyjz",
  "tags": []
}