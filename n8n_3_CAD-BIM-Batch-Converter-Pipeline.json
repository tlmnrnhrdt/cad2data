{
  "name": "n8n_3_CAD-BIM-Batch-Converter-Pipeline",
  "nodes": [
    {
      "parameters": {
        "content": "## üìã Quick Start Guide\n\n**1Ô∏è‚É£ Configure Settings**\nEdit \"Set Configuration Parameters\":\n- `converter_path`: Path to RvtExporter.exe\n- `source_folder`: Your CAD files location\n- `output_folder`: Where to save results\n- `file_extension`: .rvt, .ifc, .dwg, or .dgn\n\n**2Ô∏è‚É£ Run Pipeline**\nClick \"Execute Workflow\"\n\n**3Ô∏è‚É£ Get Results**\n‚úÖ Excel data files\n‚úÖ 3D DAE models\n‚úÖ HTML report",
        "height": 368,
        "width": 376
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4784,
        -928
      ],
      "id": "27c78f17-42df-418f-93fc-ca6b96abe673",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "content": "## üéì Video Tutorials\n\n**üìπ [CAD-BIM Pipeline Tutorial](https://www.youtube.com/watch?v=PMTZNRFjD6c)**\nComplete walkthrough of CAD-BIM automation\n\n**‚ö° [Automated Validation](https://www.youtube.com/watch?v=p84AmP2dcvg)**\nStop manual BIM checking forever\n\nüí° **Pro tip:** Watch before first run!",
        "height": 224,
        "width": 380,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4784,
        -544
      ],
      "id": "938e4e78-60cd-40fa-9173-044c44f27dc2",
      "name": "Sticky Note25"
    },
    {
      "parameters": {
        "content": "## üí° Pro Tips\n\n‚Ä¢ Start small (5-10 files)\n‚Ä¢ Test with different file types\n‚Ä¢ Run overnight for large batches\n‚Ä¢ Keep source files backed up\n‚Ä¢ Close CAD applications first\n\n**Optimization:**\n‚Ä¢ SSD = 2-3x faster\n‚Ä¢ More RAM = stability\n‚Ä¢ Exclude huge files initially",
        "height": 296,
        "width": 380,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4784,
        16
      ],
      "id": "3e4e66ce-72a5-450c-8d34-d481113cb94d",
      "name": "Sticky Note26"
    },
    {
      "parameters": {
        "content": "## üìà Pipeline Metrics\n\n**Tracks:**\n‚Ä¢ Total pipeline time\n‚Ä¢ Per-file conversion time\n‚Ä¢ Success/failure rates\n‚Ä¢ Input/output file sizes\n‚Ä¢ Processing efficiency\n\n**Typical performance:**\n‚Ä¢ Small files: 10-30 sec\n‚Ä¢ Medium: 30-60 sec\n‚Ä¢ Large: 1-3 min",
        "height": 300,
        "width": 376,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4784,
        336
      ],
      "id": "5570b264-a191-47e1-8b76-0f85dd3391a8",
      "name": "Sticky Note27"
    },
    {
      "parameters": {
        "content": "## üÜò Support\n\n**Resources:**\nüåê [DataDrivenConstruction.io](https://datadrivenconstruction.io)\nüìß support@datadrivenconstruction.io\nüí¨ [Community Forum](https://t.me/datadrivenconstruction)\n\n**Documentation:**\nüìö [n8n Docs](https://docs.n8n.io)\nüé• [YouTube Channel](https://youtube.com/@datadrivenconstruction)",
        "height": 244,
        "width": 372,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4784,
        656
      ],
      "id": "6c541e97-5acc-4493-a209-817ee8f676d6",
      "name": "Sticky Note28"
    },
    {
      "parameters": {
        "content": "## üéØ Use Cases\n\n**Weekly Reports**\nAutomate Monday conversions\n\n**Quality Control**\nValidate before client delivery\n\n**Archive Projects**\nConvert old files to lightweight formats\n\n**BI Integration**\nFeed Excel data to Power BI",
        "height": 304,
        "width": 380,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4784,
        -304
      ],
      "id": "0e99d687-d3fc-45e6-bc1b-3611ca546ac3",
      "name": "Sticky Note29"
    },
    {
      "parameters": {
        "content": "‚≠ê **If you find our tools helpful**, please consider starring our repository on [GitHub](https://github.com/datadrivenconstruction/cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto). **Your support helps us** improve and continue developing open solutions for the community!\n",
        "height": 100,
        "width": 372
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4784,
        -1040
      ],
      "id": "52dbc68a-6892-413d-a483-b2595ac7a618",
      "name": "Sticky Note31"
    },
    {
      "parameters": {
        "content": "## üìã Options Parameter Configuration Guide\n\n## üéØ Overview\nThe Options parameter allows you to customize the export process with various flags and settings. Multiple options can be combined using spaces.\n\n## üöÄ Available Options\n\n### üì¶ Export Modes\n| Mode   | Description |\n|------|-------------|\n| `basic`   |  Minimal export with essential data only |\n| `standard`   | Default export level with standard properties |\n| `complete`   | Full export including all available data |\n| `custom`   | Custom export using category file specification |\n\n### üõ†Ô∏è Feature Flags\n| Option | Description |\n|--------|-------------|\n| `bbox` | Add BoundingBox geometry of each element in XLSX |\n| `schedule` | Export all Schedules |\n| `sheets2pdf` | Export all Sheets to PDF format |\n| `[<output file>]` | Specify custom output file path |\n| `[<category file>]` | Text file with category names (required for custom mode) |\n\n### üö´ Disable Options\n| Option | Description |\n|--------|-------------|\n| `-no-xlsx` | Disable export to .xlsx format |\n| `-no-collada` | Disable export to .dae format |\n\n---\n\n## üí° Usage Examples\n\n### Example 1: **Basic Export with BoundingBox**\n```bash\nOptions: bbox basic\n```\n> Exports basic data with BoundingBox geometry included\n\n### Example 2: **Complete Export with Schedules**\n```bash\nOptions: complete schedule sheets2pdf\n```\n> Full data export including all schedules and sheets converted to PDF\n\n### Example 3: **Custom Mode with Category File**\n```bash\nOptions: custom categories.txt bbox\n```\n> Custom export using categories.txt file with BoundingBox geometry\n\n### Example 4: **Export Without Specific Formats**\n```bash\nOptions: standard -no-xlsx -no-collada\n```\n> Standard export excluding XLSX and Collada formats\n\n### Example 5: **Schedules Only Export**\n```bash\nOptions: schedule -no-collada\n```\n> Export only schedules without Collada format\n\n### Example 6: **Custom Output Path**\n```bash\nOptions: C:\\Output\\result.xlsx complete bbox\n```\n> Complete export with BoundingBox to specific output file\n\n---\n\n## ‚ö° Quick Tips\n- **Combine multiple options** by separating them with spaces\n- **Order matters** - export mode should come before other options\n- **Custom mode** requires a category file to function properly\n- **Disable flags** can be used to exclude unwanted formats\n\n---\n\n## üìù Notes\n- All options are case-sensitive\n- Invalid combinations will be ignored\n- Default behavior applies when no options are specified",
        "height": 1940,
        "width": 520
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4384,
        -1040
      ],
      "id": "bb81a207-8975-413c-aac9-bd47d469bb9c",
      "name": "Sticky Note"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -3760,
        -640
      ],
      "id": "eafb883b-c516-4b38-b9b3-2d7b744731a4",
      "name": "Manual Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Capture pipeline start time at the very beginning\nconst now = new Date();\nreturn [{\n  json: {\n    pipeline_start_time: now.toISOString(),\n    pipeline_start_timestamp: now.getTime(),\n    pipeline_start_message: `Pipeline started at ${now.toLocaleString()}`\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3584,
        -592
      ],
      "id": "e90eff5e-89c0-4555-a7c0-b1d72ac74ae2",
      "name": "Capture Pipeline Start Time1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -3216,
        -576
      ],
      "id": "56fbdde2-61d3-441a-813a-411ce49a9f27",
      "name": "Merge Pipeline Start with Config1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "converter-path",
              "name": "converter_path",
              "value": "C:\\Users\\Artem Boiko\\Desktop\\n8n\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\DDC_Converter_Revit\\datadrivenlibs\\RvtExporter.exe",
              "type": "string"
            },
            {
              "id": "source-folder",
              "name": "source_folder",
              "value": "C:\\Users\\Artem Boiko\\Desktop\\n8n\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\Sample_Projects",
              "type": "string"
            },
            {
              "id": "output-folder",
              "name": "output_folder",
              "value": "C:\\Users\\Artem Boiko\\Desktop\\n8n\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\Sample_Projects",
              "type": "string"
            },
            {
              "id": "include-subfolders",
              "name": "include_subfolders",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "file-extension",
              "name": "file_extension",
              "value": ".rvt",
              "type": "string"
            },
            {
              "id": "a811f4ba-b7a5-4774-a1fa-90d9c43a0de6",
              "name": "options",
              "value": "basic schedule  -no-collada",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3408,
        -480
      ],
      "id": "7fd7e5cc-fbfc-44cc-843e-3611b5a156a3",
      "name": "Set Configuration Parameters1"
    },
    {
      "parameters": {
        "command": "=powershell -Command \"Get-ChildItem -LiteralPath '{{ $json.source_folder }}' -Filter '*{{ $json.file_extension }}' {{ $json.include_subfolders ? '-Recurse' : '' }} | Select-Object -ExpandProperty FullName\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -3056,
        -464
      ],
      "id": "16ba0c4e-9582-4b90-a0e0-e22bb74f6b8e",
      "name": "Find CAD Files1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -2896,
        -576
      ],
      "id": "9b995ffe-41bf-44de-abb0-b3a62341d476",
      "name": "Merge Config with Search Results1"
    },
    {
      "parameters": {
        "jsCode": "// Process file list with configuration and pipeline start time\nconst configData = $input.first().json || {};\nconst searchData = $input.last().json || {};\n\nconst output = searchData.stdout || '';\nconst stderr = searchData.stderr || '';\n\n// Preserve pipeline start time\nconst pipeline_start_time = configData.pipeline_start_time || '';\nconst pipeline_start_timestamp = configData.pipeline_start_timestamp || Date.now();\n\nconsole.log('=== Processing File List ===');\nconsole.log('Pipeline start time:', pipeline_start_time);\nconsole.log('Config data:', configData);\nconsole.log('Raw output:', output);\nconsole.log('Files found:', output ? output.split(/\\r?\\n/).filter(x => x.trim()).length : 0);\n\nconst config = {\n  converter_path: configData.converter_path || '',\n  source_folder: configData.source_folder || '',\n  output_folder: configData.output_folder || '',\n  include_subfolders: configData.include_subfolders || false,\n  file_extension: configData.file_extension || '.rvt',\n  options: configData.options || ''\n};\n\nif (!output || !output.trim()) {\n  return [{\n    json: {\n      files: [],\n      total_files: 0,\n      message: `No files found with extension '${config.file_extension}' in ${config.source_folder}`,\n      error: stderr || 'No output from search command',\n      config: config,\n      pipeline_start_time: pipeline_start_time,\n      pipeline_start_timestamp: pipeline_start_timestamp\n    }\n  }];\n}\n\nlet normalizedExtension = (config.file_extension || '').trim();\nif (normalizedExtension && !normalizedExtension.startsWith('.')) {\n  normalizedExtension = '.' + normalizedExtension;\n}\n\nlet rawPaths = [];\ntry {\n  rawPaths = output.trim().split(/\\r?\\n/)\n    .map(path => (path || '').trim())\n    .filter(path => path && path.length > 0);\n} catch (error) {\n  console.log('Error splitting output:', error);\n  return [{\n    json: {\n      files: [],\n      total_files: 0,\n      message: `Error processing search results: ${error.message}`,\n      config: config,\n      pipeline_start_time: pipeline_start_time,\n      pipeline_start_timestamp: pipeline_start_timestamp\n    }\n  }];\n}\n\nconst filePaths = rawPaths.filter(path => {\n  if (!path || !normalizedExtension) return false;\n  const lowerPath = path.toLowerCase();\n  const lowerExt = normalizedExtension.toLowerCase();\n  return lowerPath.endsWith(lowerExt);\n});\n\nif (filePaths.length === 0) {\n  return [{\n    json: {\n      files: [],\n      total_files: 0,\n      message: `No files found with extension '${normalizedExtension}' in ${config.source_folder}`,\n      config: config,\n      pipeline_start_time: pipeline_start_time,\n      pipeline_start_timestamp: pipeline_start_timestamp\n    }\n  }];\n}\n\nconst files = filePaths.map((filePath, index) => {\n  let fileName = 'unknown_file';\n  let fileNameWithoutExt = 'unknown_file';\n  \n  try {\n    if (filePath && typeof filePath === 'string') {\n      const normalizedPath = filePath.replace(/\\\\/g, '/');\n      const pathParts = normalizedPath.split('/');\n      fileName = pathParts[pathParts.length - 1] || 'unknown_file';\n      \n      console.log(`Processing file ${index + 1}: ${fileName} from path: ${filePath}`);\n      \n      const lastDotIndex = fileName.lastIndexOf('.');\n      if (lastDotIndex > 0) {\n        fileNameWithoutExt = fileName.substring(0, lastDotIndex);\n      } else {\n        fileNameWithoutExt = fileName;\n      }\n    }\n  } catch (error) {\n    console.log(`Error parsing file path ${filePath}:`, error);\n  }\n  \n  const extWithoutDot = normalizedExtension ? normalizedExtension.substring(1) : 'unknown';\n  \n  return {\n    index: index + 1,\n    file_path: filePath,\n    file_name: fileName,\n    file_name_without_ext: fileNameWithoutExt,\n    converter_path: config.converter_path,\n    expected_output: `${config.output_folder}\\\\${fileNameWithoutExt}_${extWithoutDot}.xlsx`,\n    expected_output_dae: `${config.output_folder}\\\\${fileNameWithoutExt}_${extWithoutDot}.dae`,\n    config: config,\n    options: config.options,\n    pipeline_start_time: pipeline_start_time,\n    pipeline_start_timestamp: pipeline_start_timestamp\n  };\n});\n\nconsole.log('Processed files:', files.map(f => f.file_name));\n\nreturn [{\n  json: {\n    files: files,\n    total_files: files.length,\n    message: `Found ${files.length} files to convert`,\n    config: config,\n    pipeline_start_time: pipeline_start_time,\n    pipeline_start_timestamp: pipeline_start_timestamp\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2736,
        -576
      ],
      "id": "f8719149-f1b2-4683-a27d-c1e728264126",
      "name": "Process File List1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "files-exist-condition",
              "leftValue": "={{ $json.files && $json.files.length || 0 }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2576,
        -576
      ],
      "id": "ece36aa8-a1a1-49d8-b4b9-c9a0b98c38cc",
      "name": "Check if Files Exist1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "files",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2384,
        -592
      ],
      "id": "92201f1a-9752-4c42-80ff-0fec2b37014d",
      "name": "Split Files for Processing1"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=mkdir \"{{ $json.config.output_folder }}\" 2>nul || echo Output directory ready"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -2208,
        -496
      ],
      "id": "fc748649-cf47-45ad-95bc-89236ded1192",
      "name": "Create Output Directory1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -2048,
        -576
      ],
      "id": "4016011a-0f33-4c61-8d34-7247d54a394e",
      "name": "Merge File Data1"
    },
    {
      "parameters": {
        "jsCode": "// Capture conversion start time and preserve ALL data including pipeline start\nreturn $input.all().map(item => {\n  const json = {...item.json};\n  json.conversion_start_time = new Date().toISOString();\n  json.conversion_start_timestamp = Date.now();\n  console.log(`Starting conversion for: ${json.file_name} at ${json.conversion_start_time}`);\n  console.log(`Pipeline started at: ${json.pipeline_start_time}`);\n  return {json};\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1872,
        -576
      ],
      "id": "97724e33-e9e4-4358-88ee-3c64eed3cae0",
      "name": "Capture Start Time1"
    },
    {
      "parameters": {
        "unit": "milliseconds"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        -1712,
        -576
      ],
      "id": "db22f455-bd7f-4173-b63d-f3b5e8247e71",
      "name": "Small Delay",
      "webhookId": "5a1cb608-ec3e-4832-a289-f6a52ef8bc7a"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=\"{{ $json.converter_path }}\" \"{{ $json.file_path }}\" \"{{ $json.expected_output }}\" \"{{ $json.expected_output_dae }}\" {{ $json.options }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1552,
        -464
      ],
      "id": "c2b1d913-0e6e-4260-878a-1c13b7e65dbb",
      "name": "Execute Conversion1",
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Calculate actual conversion time and rename outputs - preserve pipeline start time\nreturn $input.all().map(item => {\n  const json = {...item.json};\n  \n  // Rename stdout/stderr\n  json.conversion_stdout = json.stdout || '';\n  json.conversion_stderr = json.stderr || '';\n  json.conversion_exitCode = json.exitCode || 0;\n  delete json.stdout;\n  delete json.stderr;\n  delete json.exitCode;\n  \n  // Calculate actual processing time with decimal precision\n  if (json.conversion_start_timestamp) {\n    const endTime = Date.now();\n    const startTime = json.conversion_start_timestamp;\n    const processingTimeMs = endTime - startTime;\n    json.processing_time = processingTimeMs / 1000;\n    json.processing_time_ms = processingTimeMs;\n    json.conversion_end_time = new Date().toISOString();\n    json.conversion_end_timestamp = endTime;\n    console.log(`Conversion completed for: ${json.file_name} in ${json.processing_time.toFixed(2)} seconds`);\n  } else {\n    json.processing_time = 0;\n    json.processing_time_ms = 0;\n    console.warn(`No start timestamp found for: ${json.file_name}`);\n  }\n  \n  // Ensure pipeline start time is preserved\n  console.log(`Pipeline start preserved: ${json.pipeline_start_timestamp}`);\n  \n  return {json};\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1392,
        -464
      ],
      "id": "604e6815-a938-4bf5-8b9b-62043e64c254",
      "name": "Calculate Conversion Time1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1232,
        -576
      ],
      "id": "539ef311-3361-480e-be5d-466ef736fd68",
      "name": "Merge Data Before Verification1"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=powershell -Command \"$xlsx='{{ $json.expected_output }}'; $dae='{{ $json.expected_output_dae }}'; $revit='{{ $json.file_path }}'; $xlsxExists=Test-Path -LiteralPath $xlsx; $daeExists=Test-Path -LiteralPath $dae; $revitExists=Test-Path -LiteralPath $revit; $xlsxSize=if($xlsxExists){(Get-Item -LiteralPath $xlsx).Length}else{0}; $daeSize=if($daeExists){(Get-Item -LiteralPath $dae).Length}else{0}; $revitSize=if($revitExists){(Get-Item -LiteralPath $revit).Length}else{0}; Write-Output ('XLSX_EXISTS:'+$xlsxExists+'|XLSX_SIZE:'+$xlsxSize+'|DAE_EXISTS:'+$daeExists+'|DAE_SIZE:'+$daeSize+'|REVIT_EXISTS:'+$revitExists+'|REVIT_SIZE:'+$revitSize)\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1072,
        -576
      ],
      "id": "67dd963e-50d4-4f6a-8c1a-f5246726c273",
      "name": "Verify Output Files and Get Sizes1"
    },
    {
      "parameters": {
        "jsCode": "// Complete file verification with processing time - preserve pipeline start time\nconst allInputs = $input.all();\nconst mergedDataItems = $('Merge Data Before Verification1').all();\n\nconsole.log(`=== Complete File Verification ===`);\nconsole.log(`Total verification inputs: ${allInputs.length}`);\nconsole.log(`Total merged data items: ${mergedDataItems.length}`);\n\nconst results = [];\n\n// Process each file\nallInputs.forEach((input, index) => {\n  const verificationData = input.json || {};\n  \n  // Find corresponding merged data by matching index\n  const mergedData = mergedDataItems[index]?.json || {};\n  \n  // Extract all necessary data from merged node\n  const fileName = mergedData.file_name || 'unknown_file';\n  const filePath = mergedData.file_path || '';\n  const expectedOutput = mergedData.expected_output || '';\n  const expectedOutputDae = mergedData.expected_output_dae || '';\n  const fileIndex = mergedData.index || index + 1;\n  const processingTime = mergedData.processing_time || 0;\n  const config = mergedData.config || {};\n  const conversionStartTime = mergedData.conversion_start_time || '';\n  const conversionEndTime = mergedData.conversion_end_time || '';\n  const conversionEndTimestamp = mergedData.conversion_end_timestamp || Date.now();\n  \n  // IMPORTANT: Preserve pipeline start time\n  const pipelineStartTime = mergedData.pipeline_start_time || '';\n  const pipelineStartTimestamp = mergedData.pipeline_start_timestamp || 0;\n\n  console.log(`Processing verification for file ${fileIndex}: ${fileName}`);\n  console.log('Actual processing time:', processingTime, 'seconds');\n  console.log('Pipeline start timestamp:', pipelineStartTimestamp);\n\n  // Get verification output from the current input\n  let verificationOutput = verificationData.stdout || verificationData.verification_output || '';\n\n  // Parse PowerShell output\n  let successXlsx = false;\n  let successDae = false;\n  let successRevit = false;\n  let fileSizeXlsx = 0;\n  let fileSizeDae = 0;\n  let fileSizeRevit = 0;\n\n  try {\n    if (verificationOutput && verificationOutput.includes('|')) {\n      const parts = verificationOutput.split('|');\n      \n      parts.forEach(part => {\n        if (part && part.includes('XLSX_EXISTS:')) {\n          successXlsx = part.includes('XLSX_EXISTS:True');\n        }\n        if (part && part.includes('XLSX_SIZE:')) {\n          const sizeStr = part.replace('XLSX_SIZE:', '').trim();\n          fileSizeXlsx = parseInt(sizeStr) || 0;\n        }\n        if (part && part.includes('DAE_EXISTS:')) {\n          successDae = part.includes('DAE_EXISTS:True');\n        }\n        if (part && part.includes('DAE_SIZE:')) {\n          const sizeStr = part.replace('DAE_SIZE:', '').trim();\n          fileSizeDae = parseInt(sizeStr) || 0;\n        }\n        if (part && part.includes('REVIT_EXISTS:')) {\n          successRevit = part.includes('REVIT_EXISTS:True');\n        }\n        if (part && part.includes('REVIT_SIZE:')) {\n          const sizeStr = part.replace('REVIT_SIZE:', '').trim();\n          fileSizeRevit = parseInt(sizeStr) || 0;\n        }\n      });\n    }\n  } catch (error) {\n    console.log('Error parsing verification output:', error);\n  }\n\n  const finalSuccess = successXlsx && successDae && fileSizeXlsx > 0 && fileSizeDae > 0;\n\n  const statusMessage = finalSuccess \n    ? `‚úÖ [${fileIndex}] Successfully converted: ${fileName} (XLSX: ${Math.round(fileSizeXlsx/1024)}KB, DAE: ${Math.round(fileSizeDae/1024)}KB, ${processingTime.toFixed(1)}s)`\n    : `‚ùå [${fileIndex}] Failed to convert: ${fileName} (XLSX: ${successXlsx && fileSizeXlsx > 0 ? '‚úì' : '‚úó'}, DAE: ${successDae && fileSizeDae > 0 ? '‚úì' : '‚úó'}, ${processingTime.toFixed(1)}s)`;\n\n  const result = {\n    file_name: fileName,\n    file_path: filePath,\n    expected_output: expectedOutput,\n    expected_output_dae: expectedOutputDae,\n    success: finalSuccess,\n    success_xlsx: successXlsx && fileSizeXlsx > 0,\n    success_dae: successDae && fileSizeDae > 0,\n    processing_time: processingTime,\n    file_size: fileSizeXlsx + fileSizeDae,\n    file_size_xlsx: fileSizeXlsx,\n    file_size_dae: fileSizeDae,\n    file_size_revit: fileSizeRevit,\n    index: fileIndex,\n    status: finalSuccess ? 'converted' : 'failed',\n    message: statusMessage,\n    timestamp: new Date().toISOString(),\n    verification_output: verificationOutput,\n    config: config,\n    conversion_start_time: conversionStartTime,\n    conversion_end_time: conversionEndTime,\n    conversion_end_timestamp: conversionEndTimestamp,\n    pipeline_start_time: pipelineStartTime,\n    pipeline_start_timestamp: pipelineStartTimestamp\n  };\n\n  console.log(`Verification complete for ${fileName}: ${result.message}`);\n  results.push({ json: result });\n});\n\nconsole.log(`=== Returning ${results.length} verification results ===`);\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -912,
        -576
      ],
      "id": "0b82bec8-99dd-44dc-a308-58f353140eb0",
      "name": "Complete File Verification1"
    },
    {
      "parameters": {
        "jsCode": "// Generate HTML Report with CORRECT pipeline timing and no-collada handling\nconst results = $input.all();\n\n// Get the current time as pipeline end\nconst pipelineEndTime = Date.now();\n\n// Find the pipeline start timestamp from the data\nlet pipelineStartTimestamp = null;\nlet config = {};\n\n// Extract timing and config from results\nfor (const result of results) {\n  if (result.json) {\n    // Get pipeline start timestamp\n    if (result.json.pipeline_start_timestamp && !pipelineStartTimestamp) {\n      pipelineStartTimestamp = result.json.pipeline_start_timestamp;\n      console.log('Found pipeline start timestamp:', pipelineStartTimestamp);\n    }\n    \n    // Get config\n    if (result.json.config && Object.keys(result.json.config).length > 0) {\n      config = result.json.config;\n    }\n  }\n}\n\n// Check if no-collada option is enabled\nconst noColladaEnabled = config.options && config.options.includes('no-collada');\nconsole.log('No-collada mode enabled:', noColladaEnabled);\n\n// Calculate total pipeline time in minutes\nlet totalPipelineMinutes = '0.00';\nif (pipelineStartTimestamp) {\n  const totalMs = pipelineEndTime - pipelineStartTimestamp;\n  totalPipelineMinutes = (totalMs / 60000).toFixed(2);\n  console.log('Pipeline timing:', {\n    start: pipelineStartTimestamp,\n    end: pipelineEndTime,\n    totalMs: totalMs,\n    totalMinutes: totalPipelineMinutes\n  });\n} else {\n  console.warn('No pipeline start timestamp found!');\n}\n\n// Use config output folder or fallback\nconst outputFolder = config.output_folder || 'C:\\\\temp';\n\n// Count successful and failed conversions\nlet totalFiles = 0;\nlet successfulConversions = 0;\nlet failedConversions = 0;\nlet totalInputSize = 0;\nlet totalOutputSize = 0;\n\nconst successfulFiles = [];\nconst failedFiles = [];\n\nresults.forEach((result, index) => {\n  const data = result.json || {};\n  totalFiles++;\n  \n  const processingTime = data.processing_time || 0;\n  const xlsxSuccess = data.success_xlsx || false;\n  const daeSuccess = data.success_dae || false;\n  const fileSizeRevit = data.file_size_revit || 0;\n  const fileSizeXlsx = data.file_size_xlsx || 0;\n  const fileSizeDae = data.file_size_dae || 0;\n  \n  totalInputSize += fileSizeRevit;\n  \n  // Modified success logic for no-collada mode\n  let isSuccess = false;\n  if (noColladaEnabled) {\n    // In no-collada mode, only XLSX matters\n    isSuccess = xlsxSuccess;\n    if (isSuccess) {\n      totalOutputSize += fileSizeXlsx;\n    }\n  } else {\n    // Normal mode: both XLSX and DAE must succeed\n    isSuccess = xlsxSuccess && daeSuccess;\n    if (isSuccess) {\n      totalOutputSize += fileSizeXlsx + fileSizeDae;\n    }\n  }\n  \n  if (isSuccess) {\n    successfulConversions++;\n    successfulFiles.push({\n      name: data.file_name || `File ${index + 1}`,\n      originalSize: Math.round(fileSizeRevit / 1024),\n      xlsxSize: Math.round(fileSizeXlsx / 1024),\n      daeSize: Math.round(fileSizeDae / 1024),\n      totalSize: Math.round((fileSizeXlsx + (noColladaEnabled ? 0 : fileSizeDae)) / 1024),\n      xlsxPath: data.expected_output || '',\n      daePath: data.expected_output_dae || '',\n      noCollada: noColladaEnabled\n    });\n  } else {\n    failedConversions++;\n    failedFiles.push({\n      name: data.file_name || `File ${index + 1}`,\n      originalSize: Math.round(fileSizeRevit / 1024),\n      xlsxStatus: xlsxSuccess ? '‚úì' : '‚úó',\n      daeStatus: daeSuccess ? '‚úì' : '‚úó'\n    });\n  }\n});\n\nconst successRate = totalFiles > 0 ? Math.round((successfulConversions / totalFiles) * 100) : 0;\n\n// Generate timestamp for filename\nconst now = new Date();\nconst timestamp = now.toISOString().slice(0,19).replace(/:/g, '-');\nconst fileName = `CAD_Conversion_Report_${timestamp}.html`;\nconst fullPath = `${outputFolder}\\\\${fileName}`.replace(/\\\\\\\\/g, '\\\\');\n\nconsole.log('Report summary:', {\n  totalFiles,\n  successfulConversions,\n  failedConversions,\n  successRate: successRate + '%',\n  totalPipelineTime: totalPipelineMinutes + ' minutes',\n  outputPath: fullPath,\n  noColladaMode: noColladaEnabled\n});\n\n// Create HTML content with professional styling\nconst htmlContent = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CAD Project Batch Conversion Report</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body { \n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif; \n            background: #f5f6fa;\n            color: #2c3e50;\n            line-height: 1.6;\n        }\n        \n        .container { \n            max-width: 1400px; \n            margin: 0 auto; \n            background: white; \n            box-shadow: 0 0 40px rgba(0, 0, 0, 0.08); \n        }\n        \n        .header { \n            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);\n            color: white; \n            padding: 60px 40px;\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .header::before {\n            content: '';\n            position: absolute;\n            top: -50%;\n            right: -10%;\n            width: 40%;\n            height: 200%;\n            background: rgba(255, 255, 255, 0.05);\n            transform: rotate(35deg);\n        }\n        \n        .header-content {\n            position: relative;\n            z-index: 1;\n        }\n        \n        .header h1 { \n            font-size: 2.8rem; \n            font-weight: 300;\n            letter-spacing: -1px;\n            margin-bottom: 15px;\n        }\n        \n        .header .subtitle { \n            font-size: 1.1rem;\n            opacity: 0.85;\n            font-weight: 400;\n        }\n        \n        .header .timestamp {\n            margin-top: 20px;\n            font-size: 0.95rem;\n            opacity: 0.7;\n        }\n        \n        .content {\n            padding: 40px;\n        }\n        \n        .metrics { \n            display: grid; \n            grid-template-columns: repeat(5, 1fr); \n            gap: 20px; \n            margin: -20px 0 40px 0;\n            position: relative;\n            z-index: 10;\n        }\n        \n        @media (max-width: 1200px) {\n            .metrics {\n                grid-template-columns: repeat(3, 1fr);\n            }\n        }\n        \n        @media (max-width: 768px) {\n            .metrics {\n                grid-template-columns: repeat(2, 1fr);\n            }\n        }\n        \n        @media (max-width: 480px) {\n            .metrics {\n                grid-template-columns: 1fr;\n            }\n        }\n        \n        .metric { \n            background: white;\n            padding: 30px 20px;\n            border-radius: 12px;\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n            transition: all 0.3s ease;\n            border: 1px solid #e8ecf1;\n            position: relative;\n            overflow: hidden;\n            text-align: center;\n        }\n        \n        .metric::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 4px;\n            background: linear-gradient(90deg, #3b82f6 0%, #2563eb 100%);\n        }\n        \n        .metric:hover {\n            transform: translateY(-3px);\n            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n        }\n        \n        .metric-value { \n            font-size: 2.2rem; \n            font-weight: 600;\n            color: #1e3c72;\n            margin-bottom: 8px;\n            line-height: 1;\n        }\n        \n        .metric-label { \n            font-size: 0.85rem; \n            color: #64748b;\n            font-weight: 500;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .metric.highlight {\n            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);\n            border-color: #3b82f6;\n        }\n        \n        .metric.highlight::before {\n            background: linear-gradient(90deg, #10b981 0%, #059669 100%);\n        }\n        \n        .section { \n            margin: 40px 0;\n            background: white;\n            border-radius: 12px;\n            overflow: hidden;\n            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.06);\n            border: 1px solid #e8ecf1;\n        }\n        \n        .section-header {\n            background: #f8fafc;\n            padding: 24px 32px;\n            border-bottom: 1px solid #e8ecf1;\n        }\n        \n        .section h2 { \n            color: #1e293b;\n            font-size: 1.4rem;\n            font-weight: 600;\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .section-content {\n            padding: 0;\n        }\n        \n        table { \n            width: 100%; \n            border-collapse: collapse;\n        }\n        \n        th, td { \n            padding: 16px 24px;\n            text-align: left;\n            border-bottom: 1px solid #f1f5f9;\n        }\n        \n        th { \n            background: #f8fafc;\n            font-weight: 600;\n            color: #475569;\n            font-size: 0.875rem;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            position: sticky;\n            top: 0;\n            z-index: 1;\n        }\n        \n        tr:last-child td {\n            border-bottom: none;\n        }\n        \n        tr:hover { \n            background: #f8fafc;\n        }\n        \n        .status-success { \n            background: #10b981;\n            color: white;\n            padding: 6px 12px;\n            border-radius: 6px;\n            font-size: 0.75rem;\n            font-weight: 600;\n            display: inline-block;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .status-failed { \n            background: #ef4444;\n            color: white;\n            padding: 6px 12px;\n            border-radius: 6px;\n            font-size: 0.75rem;\n            font-weight: 600;\n            display: inline-block;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .status-skipped { \n            background: #6b7280;\n            color: white;\n            padding: 6px 12px;\n            border-radius: 6px;\n            font-size: 0.75rem;\n            font-weight: 600;\n            display: inline-block;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .config-section {\n            background: #f8fafc;\n            padding: 32px;\n            border-radius: 12px;\n            margin: 40px 0;\n        }\n        \n        .config-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n            gap: 24px;\n            margin-top: 20px;\n        }\n        \n        .config-item {\n            display: flex;\n            align-items: flex-start;\n            gap: 16px;\n        }\n        \n        .config-label {\n            font-weight: 600;\n            color: #475569;\n            min-width: 140px;\n            font-size: 0.9rem;\n        }\n        \n        .config-value {\n            color: #1e293b;\n            font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\n            background: white;\n            padding: 8px 12px;\n            border-radius: 6px;\n            font-size: 0.85rem;\n            word-break: break-all;\n            flex: 1;\n            border: 1px solid #e2e8f0;\n        }\n        \n        .footer { \n            background: #f8fafc;\n            padding: 40px;\n            text-align: center;\n            color: #64748b;\n            border-top: 1px solid #e8ecf1;\n        }\n        \n        .footer .company {\n            font-size: 1.1rem;\n            font-weight: 600;\n            color: #1e293b;\n            margin-bottom: 8px;\n        }\n        \n        .footer .version {\n            font-size: 0.85rem;\n            margin-top: 16px;\n            color: #94a3b8;\n        }\n        \n        .report-location {\n            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);\n            border: 1px solid #3b82f6;\n            border-radius: 12px;\n            padding: 20px 28px;\n            margin: 30px 0;\n            text-align: center;\n            color: #1e3c72;\n            font-size: 0.95rem;\n        }\n        \n        .report-location strong {\n            color: #1e3c72;\n            font-weight: 600;\n        }\n        \n        .size-cell {\n            font-family: 'SF Mono', Monaco, monospace;\n            font-size: 0.9rem;\n        }\n        \n        .file-link {\n            color: #3b82f6;\n            text-decoration: none;\n            font-weight: 500;\n            transition: all 0.2s ease;\n            position: relative;\n            display: inline-block;\n            padding: 2px 0;\n        }\n        \n        .file-link:hover {\n            color: #2563eb;\n            text-decoration: underline;\n        }\n        \n        .tooltip {\n            position: relative;\n            display: inline-block;\n        }\n        \n        .tooltip .tooltiptext {\n            visibility: hidden;\n            width: 280px;\n            background-color: #333;\n            color: #fff;\n            text-align: center;\n            border-radius: 8px;\n            padding: 12px 16px;\n            position: absolute;\n            z-index: 1000;\n            bottom: 125%;\n            left: 50%;\n            margin-left: -140px;\n            opacity: 0;\n            transition: opacity 0.3s;\n            font-size: 0.85rem;\n            line-height: 1.4;\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n        }\n        \n        .tooltip .tooltiptext::after {\n            content: \"\";\n            position: absolute;\n            top: 100%;\n            left: 50%;\n            margin-left: -5px;\n            border-width: 5px;\n            border-style: solid;\n            border-color: #333 transparent transparent transparent;\n        }\n        \n        .tooltip:hover .tooltiptext {\n            visibility: visible;\n            opacity: 1;\n        }\n        \n        .no-collada-notice {\n            background: #fef3c7;\n            border: 1px solid #fbbf24;\n            border-radius: 8px;\n            padding: 16px;\n            margin: 20px 0;\n            color: #92400e;\n            font-size: 0.9rem;\n            text-align: center;\n        }\n        \n        .no-collada-notice strong {\n            color: #78350f;\n        }\n        \n        @media print {\n            body { background: white; }\n            .container { box-shadow: none; }\n            .metric { box-shadow: none; border: 1px solid #e5e7eb; }\n            .section { box-shadow: none; page-break-inside: avoid; }\n            .tooltip .tooltiptext { display: none; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"header-content\">\n                <h1>CAD Project Batch Conversion Report</h1>\n                <p class=\"subtitle\">Automated conversion pipeline execution summary</p>\n                <p class=\"timestamp\">${now.toLocaleString('en-US', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric', \n                    hour: '2-digit', \n                    minute: '2-digit' \n                })}</p>\n            </div>\n        </div>\n        \n        <div class=\"content\">\n            <div class=\"metrics\">\n                <div class=\"metric\">\n                    <div class=\"metric-value\">${totalFiles}</div>\n                    <div class=\"metric-label\">Total Files</div>\n                </div>\n                <div class=\"metric highlight\">\n                    <div class=\"metric-value\">${successRate}%</div>\n                    <div class=\"metric-label\">Success Rate</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\">${totalPipelineMinutes}</div>\n                    <div class=\"metric-label\">Total Time (Minutes)</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\">${Math.round(totalInputSize / 1048576)} MB</div>\n                    <div class=\"metric-label\">Total Input Size</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\">${Math.round(totalOutputSize / 1048576)} MB</div>\n                    <div class=\"metric-label\">Total Output Size</div>\n                </div>\n            </div>\n\n            <div class=\"report-location\">\n                <strong>Report Location:</strong> ${fullPath}\n            </div>\n\n            ${noColladaEnabled ? `\n            <div class=\"no-collada-notice\">\n                <strong>Note:</strong> DAE (Collada) file generation was skipped as per configuration (no-collada option enabled).\n            </div>\n            ` : ''}\n\n            ${successfulFiles.length > 0 ? `\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <h2>‚úÖ Successfully Converted Files (${successfulFiles.length})</h2>\n                </div>\n                <div class=\"section-content\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>File Name</th>\n                                <th>Original Size</th>\n                                <th>Excel Output</th>\n                                ${noColladaEnabled ? '<th>DAE Output</th>' : '<th>DAE Output</th>'}\n                                <th>Total Output</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${successfulFiles.map(file => `\n                                <tr>\n                                    <td><strong>${file.name}</strong></td>\n                                    <td class=\"size-cell\">${file.originalSize} KB</td>\n                                    <td class=\"size-cell\">\n                                        <a href=\"file:///${file.xlsxPath.replace(/\\\\/g, '/')}\" class=\"file-link\" target=\"_blank\">${file.xlsxSize} KB</a>\n                                    </td>\n                                    <td class=\"size-cell\">\n                                        ${noColladaEnabled ? \n                                            '<span class=\"status-skipped\">SKIPPED</span>' : \n                                            `<div class=\"tooltip\">\n                                                <a href=\"file:///${file.daePath.replace(/\\\\/g, '/')}\" class=\"file-link\" target=\"_blank\">${file.daeSize} KB</a>\n                                                <span class=\"tooltiptext\">üí° Tip: Use the free CAD Assistant software for the best viewing experience of DAE files</span>\n                                            </div>`\n                                        }\n                                    </td>\n                                    <td class=\"size-cell\"><strong>${file.totalSize} KB</strong></td>\n                                </tr>\n                            `).join('')}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            ` : ''}\n\n            ${failedFiles.length > 0 ? `\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <h2>‚ùå Failed Conversions (${failedFiles.length})</h2>\n                </div>\n                <div class=\"section-content\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>File Name</th>\n                                <th>Original Size</th>\n                                <th>XLSX Status</th>\n                                <th>DAE Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${failedFiles.map(file => `\n                                <tr>\n                                    <td><strong>${file.name}</strong></td>\n                                    <td class=\"size-cell\">${file.originalSize} KB</td>\n                                    <td><span class=\"status-${file.xlsxStatus === '‚úì' ? 'success' : 'failed'}\">${file.xlsxStatus === '‚úì' ? 'SUCCESS' : 'FAILED'}</span></td>\n                                    <td>${noColladaEnabled && file.xlsxStatus === '‚úì' ? \n                                        '<span class=\"status-skipped\">SKIPPED</span>' : \n                                        `<span class=\"status-${file.daeStatus === '‚úì' ? 'success' : 'failed'}\">${file.daeStatus === '‚úì' ? 'SUCCESS' : 'FAILED'}</span>`\n                                    }</td>\n                                </tr>\n                            `).join('')}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            ` : ''}\n\n            <div class=\"config-section\">\n                <h2 style=\"color: #1e293b; font-size: 1.4rem; font-weight: 600; margin-bottom: 20px;\">\n                    ‚öôÔ∏è Configuration Details\n                </h2>\n                <div class=\"config-grid\">\n                    <div class=\"config-item\">\n                        <span class=\"config-label\">Source Folder:</span>\n                        <span class=\"config-value\">${config.source_folder || 'Not specified'}</span>\n                    </div>\n                    <div class=\"config-item\">\n                        <span class=\"config-label\">Output Folder:</span>\n                        <span class=\"config-value\">${config.output_folder || 'Not specified'}</span>\n                    </div>\n                    <div class=\"config-item\">\n                        <span class=\"config-label\">File Extension:</span>\n                        <span class=\"config-value\">${config.file_extension || 'Not specified'}</span>\n                    </div>\n                    <div class=\"config-item\">\n                        <span class=\"config-label\">Include Subfolders:</span>\n                        <span class=\"config-value\">${config.include_subfolders ? 'Yes' : 'No'}</span>\n                    </div>\n                    <div class=\"config-item\">\n                        <span class=\"config-label\">Converter Options:</span>\n                        <span class=\"config-value\">${config.options || 'None'}</span>\n                    </div>\n                    <div class=\"config-item\">\n                        <span class=\"config-label\">Generated:</span>\n                        <span class=\"config-value\">${now.toLocaleString()}</span>\n                    </div>\n                    <div class=\"config-item\">\n                        <span class=\"config-label\">Workflow ID:</span>\n                        <span class=\"config-value\">FYFQhblt4gILLSpe</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"footer\">\n            <div class=\"company\">DataDrivenConstruction.io</div>\n            <div>Professional CAD Conversion Pipeline</div>\n            <div class=\"version\">Version 2.0 | Automated Batch Processing System</div>\n        </div>\n    </div>\n</body>\n</html>`;\n\n// Return data for saving and opening\nreturn [{\n    json: {\n        html_content: htmlContent,\n        file_name: fileName,\n        full_path: fullPath,\n        output_folder: outputFolder,\n        total_files: totalFiles,\n        successful_conversions: successfulConversions,\n        failed_conversions: failedConversions,\n        success_rate: successRate,\n        total_pipeline_time: totalPipelineMinutes,\n        config: config,\n        summary_message: `‚úÖ Conversion Complete! ${successfulConversions}/${totalFiles} files converted successfully (${successRate}% success rate) in ${totalPipelineMinutes} minutes`\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -752,
        -576
      ],
      "id": "f9392af5-c779-426f-a939-9c7e6d8375ec",
      "name": "Generate HTML Report1"
    },
    {
      "parameters": {
        "jsCode": "// Prepare binary data for file saving\nconst item = $input.first().json;\n\nconsole.log('Preparing binary data for file:', item.file_name);\nconsole.log('Full path:', item.full_path);\n\nif (!item.html_content) {\n  throw new Error('No HTML content found');\n}\n\nreturn [{\n  json: item,\n  binary: {\n    report: {\n      data: Buffer.from(item.html_content, 'utf-8').toString('base64'),\n      mimeType: 'text/html',\n      fileName: item.file_name,\n      fileExtension: 'html'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        -576
      ],
      "id": "9f7d9a09-2f75-44d9-9c42-e8cbc770ae35",
      "name": "Prepare Binary Data1"
    },
    {
      "parameters": {
        "fileName": "={{ $json.full_path }}",
        "dataPropertyName": "report",
        "options": {}
      },
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        -432,
        -576
      ],
      "id": "3134fafa-1db7-4c60-b138-71eb5538e39f",
      "name": "Save HTML File1"
    },
    {
      "parameters": {
        "jsCode": "// Verify file was saved and prepare for opening\nconst data = $input.first().json;\nconst fullPath = data.full_path || '';\n\nconsole.log('Preparing to open file:', fullPath);\n\n// Normalize path for Windows\nconst windowsPath = fullPath.replace(/\\\\\\\\/g, '\\\\').replace(/\\//g, '\\\\');\n\nreturn [{\n  json: {\n    ...data,\n    windows_path: windowsPath,\n    command_to_open: `cmd /c start \"\" \"${windowsPath}\"`\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -272,
        -576
      ],
      "id": "5940c5a0-c271-4db8-9ff1-9bcb284ecebb",
      "name": "Verify and Prepare Path1"
    },
    {
      "parameters": {
        "command": "=cmd /c start \"\" \"{{ $json.windows_path }}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -112,
        -576
      ],
      "id": "af226cfc-4c2b-41fd-89b6-c5e059ee93ff",
      "name": "Open HTML Report1"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=echo üèÅ CAD Conversion Pipeline Completed Successfully! & echo üìã Summary: {{ $json.summary_message }} & echo üìÅ Report Location: {{ $json.windows_path }} & echo ‚ú® All processes finished successfully! & echo. & echo üéØ Next Steps: & echo    1. Check the HTML report that opened in your browser & echo    2. Verify output files in the specified folder & echo    3. Review conversion results and metrics & echo. & echo ‚úÖ Pipeline execution completed!"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        48,
        -576
      ],
      "id": "045b996a-8b9e-47d7-bd9e-bd59af5f3cdd",
      "name": "Final Completion Notice1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "no-files-message",
              "name": "message",
              "value": "‚ö†Ô∏è No files found to convert with the specified parameters",
              "type": "string"
            },
            {
              "id": "no-files-details",
              "name": "details",
              "value": "Please check: 1) Source folder path exists, 2) File extension is correct, 3) Files exist in the specified location",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2384,
        -368
      ],
      "id": "49909319-0488-4936-bedb-8dc9b660b472",
      "name": "No Files Found Response1"
    },
    {
      "parameters": {
        "content": "## üèÅ GROUP 1: INITIALIZATION\n\n**Nodes in this group:**\n‚Ä¢ Manual Trigger\n‚Ä¢ Capture Pipeline Start Time\n‚Ä¢ Set Configuration Parameters\n‚Ä¢ Merge Pipeline Start with Config\n\n**What happens here:**\n1Ô∏è‚É£ Pipeline starts manually or on schedule\n2Ô∏è‚É£ Current timestamp is captured for metrics\n3Ô∏è‚É£ All settings are loaded (paths, folders, etc.)\n4Ô∏è‚É£ Configuration merged with timing data\n\nüí° **Key:** This sets up everything needed for the conversion process",
        "height": 844,
        "width": 532,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3824,
        -1040
      ],
      "id": "6207b494-660b-4f59-ade3-b6815c44f602",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## üîç GROUP 2: FILE DISCOVERY\n\n**Nodes in this group:**\n‚Ä¢ Find CAD Files\n‚Ä¢ Merge Config with Search Results\n‚Ä¢ Process File List\n‚Ä¢ Check if Files Exist\n\n**What happens here:**\n1Ô∏è‚É£ PowerShell scans the source folder\n2Ô∏è‚É£ Filters files by extension (.rvt, .ifc, etc.)\n3Ô∏è‚É£ Creates a list with full paths\n4Ô∏è‚É£ Validates that files were found\n\nüìÅ **Output:** Array of file objects with paths\n‚ùå **If no files:** Pipeline stops gracefully",
        "height": 840,
        "width": 1024,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3280,
        -1040
      ],
      "id": "4b1cfbf5-d265-48b2-8f36-fee4b4d72f3d",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "## üîÑ GROUP 3: BATCH PREPARATION\n\n**Nodes in this group:**\n‚Ä¢ Split Files for Processing\n‚Ä¢ Create Output Directory\n‚Ä¢ Merge File Data\n\n**What happens here:**\n1Ô∏è‚É£ File list is split into individual items\n2Ô∏è‚É£ Output directory is created (if needed)\n3Ô∏è‚É£ Each file gets conversion parameters\n\nüéØ **Purpose:** Enables parallel processing\nüìä **Data added:** Expected output paths for XLSX & DAE",
        "height": 844,
        "width": 316,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2240,
        -1040
      ],
      "id": "7828a70b-0b64-41db-9efb-5e1cd61e0310",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "## ‚ö° GROUP 4: CONVERSION EXECUTION\n\n**Nodes in this group:**\n‚Ä¢ Capture Start Time\n‚Ä¢ Small Delay\n‚Ä¢ Execute Conversion\n‚Ä¢ Calculate Conversion Time\n\n**What happens here:**\n1Ô∏è‚É£ Timestamp captured for each file\n2Ô∏è‚É£ Small delay prevents overload\n3Ô∏è‚É£ RvtExporter.exe runs the conversion\n4Ô∏è‚É£ Processing time calculated\n\nüîß **Command:** \n`RvtExporter.exe [input] [output.xlsx] [output.dae]`\n\n‚è±Ô∏è **Conversion Time:** 1 Minute per 100Mb.",
        "height": 840,
        "width": 800,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1904,
        -1040
      ],
      "id": "ce18cdb7-2562-400d-968f-ae5b582669bf",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "## ‚úÖ GROUP 5: VALIDATION\n\n**Nodes in this group:**\n‚Ä¢ Merge Data Before Verification\n‚Ä¢ Verify Output Files and Get Sizes\n‚Ä¢ Complete File Verification\n\n**What happens here:**\n1Ô∏è‚É£ All conversion data is consolidated\n2Ô∏è‚É£ PowerShell checks if outputs exist\n3Ô∏è‚É£ File sizes are measured\n4Ô∏è‚É£ Success/failure status determined\n\n**Success criteria:**\n‚Ä¢ Both XLSX and DAE files exist\n‚Ä¢ File sizes > 0 bytes\n‚Ä¢ No conversion errors",
        "height": 836,
        "width": 284,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1088,
        -1040
      ],
      "id": "64a89a89-909a-4163-a260-df3d39ca697a",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "content": "## üìä GROUP 6: REPORTING\n\n**Nodes in this group:**\n‚Ä¢ Generate HTML Report\n‚Ä¢ Prepare Binary Data\n‚Ä¢ Save HTML File\n\n**What happens here:**\n1Ô∏è‚É£ All results compiled into statistics\n2Ô∏è‚É£ Professional HTML report generated\n3Ô∏è‚É£ Report saved to output folder\n\n**Report includes:**\n‚Ä¢ Success rate & metrics\n‚Ä¢ Processing times\n‚Ä¢ File sizes & links\n‚Ä¢ Detailed conversion log",
        "height": 832,
        "width": 456
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -784,
        -1040
      ],
      "id": "a8d83995-64ac-4bdb-9cf9-12360c8b8b6d",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "content": "## üéØ GROUP 7: FINALIZATION\n\n**Nodes in this group:**\n‚Ä¢ Verify and Prepare Path\n‚Ä¢ Open HTML Report\n‚Ä¢ Final Completion Notice\n\n**What happens here:**\n1Ô∏è‚É£ Report path normalized for Windows\n2Ô∏è‚É£ HTML report opens in browser\n3Ô∏è‚É£ Success message displayed\n\n**Final output:**\n‚Ä¢ Report auto-opens\n‚Ä¢ Summary in console\n‚Ä¢ All files ready for use",
        "height": 828,
        "width": 484
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -304,
        -1040
      ],
      "id": "93f24e1b-bbb7-4aed-a898-83bb82d99ed5",
      "name": "Sticky Note17"
    },
    {
      "parameters": {
        "content": "## üìù Configuration Example\n\n```\nconverter_path: \nC:\\DDC_Converter\\RvtExporter.exe\nsource_folder: \nC:\\Projects\\Building_A\noutput_folder: \nC:\\Projects\\Converted\nfile_extension: .rvt\ninclude_subfolders: false\n```",
        "height": 308,
        "width": 488,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3824,
        -1376
      ],
      "id": "7ec3763d-9f4f-48ff-9372-5589db180dcf",
      "name": "Sticky Note30"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3760,
        -480
      ],
      "id": "417ece92-933d-41f6-b19c-8cb530be9940",
      "name": "Schedule Trigger1"
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Capture Pipeline Start Time1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Capture Pipeline Start Time1": {
      "main": [
        [
          {
            "node": "Set Configuration Parameters1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Pipeline Start with Config1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Pipeline Start with Config1": {
      "main": [
        [
          {
            "node": "Find CAD Files1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Config with Search Results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Configuration Parameters1": {
      "main": [
        [
          {
            "node": "Merge Pipeline Start with Config1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Find CAD Files1": {
      "main": [
        [
          {
            "node": "Merge Config with Search Results1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Config with Search Results1": {
      "main": [
        [
          {
            "node": "Process File List1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process File List1": {
      "main": [
        [
          {
            "node": "Check if Files Exist1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Files Exist1": {
      "main": [
        [
          {
            "node": "Split Files for Processing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Files Found Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Files for Processing1": {
      "main": [
        [
          {
            "node": "Create Output Directory1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge File Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Output Directory1": {
      "main": [
        [
          {
            "node": "Merge File Data1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge File Data1": {
      "main": [
        [
          {
            "node": "Capture Start Time1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Capture Start Time1": {
      "main": [
        [
          {
            "node": "Small Delay",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Data Before Verification1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Small Delay": {
      "main": [
        [
          {
            "node": "Execute Conversion1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Conversion1": {
      "main": [
        [
          {
            "node": "Calculate Conversion Time1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Conversion Time1": {
      "main": [
        [
          {
            "node": "Merge Data Before Verification1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Data Before Verification1": {
      "main": [
        [
          {
            "node": "Verify Output Files and Get Sizes1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Output Files and Get Sizes1": {
      "main": [
        [
          {
            "node": "Complete File Verification1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Complete File Verification1": {
      "main": [
        [
          {
            "node": "Generate HTML Report1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate HTML Report1": {
      "main": [
        [
          {
            "node": "Prepare Binary Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Binary Data1": {
      "main": [
        [
          {
            "node": "Save HTML File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save HTML File1": {
      "main": [
        [
          {
            "node": "Verify and Prepare Path1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify and Prepare Path1": {
      "main": [
        [
          {
            "node": "Open HTML Report1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open HTML Report1": {
      "main": [
        [
          {
            "node": "Final Completion Notice1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4ee19470-d9b9-4139-a0c6-7cdc80583fa4",
  "meta": {
    "instanceId": "1d7b1da65c471e434188555a2959bd7f825cdfb684701b1bb9481fb29d0bd489"
  },
  "id": "IJjORMVCyD8FvxyF",
  "tags": []
}